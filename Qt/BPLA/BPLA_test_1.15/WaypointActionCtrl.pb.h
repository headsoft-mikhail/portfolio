// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WaypointActionCtrl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WaypointActionCtrl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WaypointActionCtrl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WaypointActionCtrl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WaypointActionCtrl_2eproto;
namespace WAYPOINT_ACTION_CTRL {
class ActionInPoint;
class ActionInPointDefaultTypeInternal;
extern ActionInPointDefaultTypeInternal _ActionInPoint_default_instance_;
class ActionInPointResult;
class ActionInPointResultDefaultTypeInternal;
extern ActionInPointResultDefaultTypeInternal _ActionInPointResult_default_instance_;
class CircleInPointProperties;
class CircleInPointPropertiesDefaultTypeInternal;
extern CircleInPointPropertiesDefaultTypeInternal _CircleInPointProperties_default_instance_;
class CourseInPointProperties;
class CourseInPointPropertiesDefaultTypeInternal;
extern CourseInPointPropertiesDefaultTypeInternal _CourseInPointProperties_default_instance_;
class Ctrl;
class CtrlDefaultTypeInternal;
extern CtrlDefaultTypeInternal _Ctrl_default_instance_;
class MoveToPointRequest;
class MoveToPointRequestDefaultTypeInternal;
extern MoveToPointRequestDefaultTypeInternal _MoveToPointRequest_default_instance_;
class MoveToPointRequestResult;
class MoveToPointRequestResultDefaultTypeInternal;
extern MoveToPointRequestResultDefaultTypeInternal _MoveToPointRequestResult_default_instance_;
class PointInCoordinateProperties;
class PointInCoordinatePropertiesDefaultTypeInternal;
extern PointInCoordinatePropertiesDefaultTypeInternal _PointInCoordinateProperties_default_instance_;
class ServoProperties;
class ServoPropertiesDefaultTypeInternal;
extern ServoPropertiesDefaultTypeInternal _ServoProperties_default_instance_;
}  // namespace WAYPOINT_ACTION_CTRL
PROTOBUF_NAMESPACE_OPEN
template<> ::WAYPOINT_ACTION_CTRL::ActionInPoint* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::ActionInPoint>(Arena*);
template<> ::WAYPOINT_ACTION_CTRL::ActionInPointResult* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::ActionInPointResult>(Arena*);
template<> ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::CircleInPointProperties>(Arena*);
template<> ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::CourseInPointProperties>(Arena*);
template<> ::WAYPOINT_ACTION_CTRL::Ctrl* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::Ctrl>(Arena*);
template<> ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::MoveToPointRequest>(Arena*);
template<> ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult>(Arena*);
template<> ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties>(Arena*);
template<> ::WAYPOINT_ACTION_CTRL::ServoProperties* Arena::CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::ServoProperties>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WAYPOINT_ACTION_CTRL {

enum MoveToPointRequestResult_Result : int {
  MoveToPointRequestResult_Result_Result_Undefined = 0,
  MoveToPointRequestResult_Result_Result_Accepted = 1,
  MoveToPointRequestResult_Result_Result_Rejected = 2
};
bool MoveToPointRequestResult_Result_IsValid(int value);
constexpr MoveToPointRequestResult_Result MoveToPointRequestResult_Result_Result_MIN = MoveToPointRequestResult_Result_Result_Undefined;
constexpr MoveToPointRequestResult_Result MoveToPointRequestResult_Result_Result_MAX = MoveToPointRequestResult_Result_Result_Rejected;
constexpr int MoveToPointRequestResult_Result_Result_ARRAYSIZE = MoveToPointRequestResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveToPointRequestResult_Result_descriptor();
template<typename T>
inline const std::string& MoveToPointRequestResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveToPointRequestResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveToPointRequestResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveToPointRequestResult_Result_descriptor(), enum_t_value);
}
inline bool MoveToPointRequestResult_Result_Parse(
    const std::string& name, MoveToPointRequestResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveToPointRequestResult_Result>(
    MoveToPointRequestResult_Result_descriptor(), name, value);
}
enum ActionInPointResult_Result : int {
  ActionInPointResult_Result_ActionFinished = 0,
  ActionInPointResult_Result_AllActionsFinished = 1
};
bool ActionInPointResult_Result_IsValid(int value);
constexpr ActionInPointResult_Result ActionInPointResult_Result_Result_MIN = ActionInPointResult_Result_ActionFinished;
constexpr ActionInPointResult_Result ActionInPointResult_Result_Result_MAX = ActionInPointResult_Result_AllActionsFinished;
constexpr int ActionInPointResult_Result_Result_ARRAYSIZE = ActionInPointResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionInPointResult_Result_descriptor();
template<typename T>
inline const std::string& ActionInPointResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionInPointResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionInPointResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionInPointResult_Result_descriptor(), enum_t_value);
}
inline bool ActionInPointResult_Result_Parse(
    const std::string& name, ActionInPointResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionInPointResult_Result>(
    ActionInPointResult_Result_descriptor(), name, value);
}
enum ActionType : int {
  HoldPoint = 0,
  CircleInPoint = 1,
  CourseInPoint = 2,
  Drop = 3,
  Measure = 4,
  Shoot = 5,
  Servo = 6,
  PointInCoordinate = 7
};
bool ActionType_IsValid(int value);
constexpr ActionType ActionType_MIN = HoldPoint;
constexpr ActionType ActionType_MAX = PointInCoordinate;
constexpr int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor();
template<typename T>
inline const std::string& ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionType_descriptor(), enum_t_value);
}
inline bool ActionType_Parse(
    const std::string& name, ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
enum Priority : int {
  AsPossible = 0,
  InPoint = 1
};
bool Priority_IsValid(int value);
constexpr Priority Priority_MIN = AsPossible;
constexpr Priority Priority_MAX = InPoint;
constexpr int Priority_ARRAYSIZE = Priority_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Priority_descriptor();
template<typename T>
inline const std::string& Priority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Priority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Priority_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Priority_descriptor(), enum_t_value);
}
inline bool Priority_Parse(
    const std::string& name, Priority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Priority>(
    Priority_descriptor(), name, value);
}
// ===================================================================

class MoveToPointRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.MoveToPointRequest) */ {
 public:
  MoveToPointRequest();
  virtual ~MoveToPointRequest();

  MoveToPointRequest(const MoveToPointRequest& from);
  MoveToPointRequest(MoveToPointRequest&& from) noexcept
    : MoveToPointRequest() {
    *this = ::std::move(from);
  }

  inline MoveToPointRequest& operator=(const MoveToPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToPointRequest& operator=(MoveToPointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveToPointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveToPointRequest* internal_default_instance() {
    return reinterpret_cast<const MoveToPointRequest*>(
               &_MoveToPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MoveToPointRequest* other);
  friend void swap(MoveToPointRequest& a, MoveToPointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveToPointRequest* New() const final {
    return CreateMaybeMessage<MoveToPointRequest>(nullptr);
  }

  MoveToPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveToPointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveToPointRequest& from);
  void MergeFrom(const MoveToPointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveToPointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.MoveToPointRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WAYPOINT_ACTION_CTRL.ActionInPoint actions = 6;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 6;
  ::WAYPOINT_ACTION_CTRL::ActionInPoint* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WAYPOINT_ACTION_CTRL::ActionInPoint >*
      mutable_actions();
  const ::WAYPOINT_ACTION_CTRL::ActionInPoint& actions(int index) const;
  ::WAYPOINT_ACTION_CTRL::ActionInPoint* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WAYPOINT_ACTION_CTRL::ActionInPoint >&
      actions() const;

  // optional double latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // optional float altitude = 3;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  float altitude() const;
  void set_altitude(float value);

  // optional float course = 4;
  bool has_course() const;
  void clear_course();
  static const int kCourseFieldNumber = 4;
  float course() const;
  void set_course(float value);

  // optional float speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WAYPOINT_ACTION_CTRL::ActionInPoint > actions_;
  double latitude_;
  double longitude_;
  float altitude_;
  float course_;
  float speed_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// -------------------------------------------------------------------

class ActionInPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.ActionInPoint) */ {
 public:
  ActionInPoint();
  virtual ~ActionInPoint();

  ActionInPoint(const ActionInPoint& from);
  ActionInPoint(ActionInPoint&& from) noexcept
    : ActionInPoint() {
    *this = ::std::move(from);
  }

  inline ActionInPoint& operator=(const ActionInPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionInPoint& operator=(ActionInPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionInPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionInPoint* internal_default_instance() {
    return reinterpret_cast<const ActionInPoint*>(
               &_ActionInPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ActionInPoint* other);
  friend void swap(ActionInPoint& a, ActionInPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionInPoint* New() const final {
    return CreateMaybeMessage<ActionInPoint>(nullptr);
  }

  ActionInPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionInPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionInPoint& from);
  void MergeFrom(const ActionInPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionInPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.ActionInPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .WAYPOINT_ACTION_CTRL.CircleInPointProperties circleinPointProp = 7;
  bool has_circleinpointprop() const;
  void clear_circleinpointprop();
  static const int kCircleinPointPropFieldNumber = 7;
  const ::WAYPOINT_ACTION_CTRL::CircleInPointProperties& circleinpointprop() const;
  ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* release_circleinpointprop();
  ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* mutable_circleinpointprop();
  void set_allocated_circleinpointprop(::WAYPOINT_ACTION_CTRL::CircleInPointProperties* circleinpointprop);

  // optional .WAYPOINT_ACTION_CTRL.CourseInPointProperties courseinPointProp = 8;
  bool has_courseinpointprop() const;
  void clear_courseinpointprop();
  static const int kCourseinPointPropFieldNumber = 8;
  const ::WAYPOINT_ACTION_CTRL::CourseInPointProperties& courseinpointprop() const;
  ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* release_courseinpointprop();
  ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* mutable_courseinpointprop();
  void set_allocated_courseinpointprop(::WAYPOINT_ACTION_CTRL::CourseInPointProperties* courseinpointprop);

  // optional .WAYPOINT_ACTION_CTRL.ServoProperties servoProp = 9;
  bool has_servoprop() const;
  void clear_servoprop();
  static const int kServoPropFieldNumber = 9;
  const ::WAYPOINT_ACTION_CTRL::ServoProperties& servoprop() const;
  ::WAYPOINT_ACTION_CTRL::ServoProperties* release_servoprop();
  ::WAYPOINT_ACTION_CTRL::ServoProperties* mutable_servoprop();
  void set_allocated_servoprop(::WAYPOINT_ACTION_CTRL::ServoProperties* servoprop);

  // optional .WAYPOINT_ACTION_CTRL.PointInCoordinateProperties pointInCoordProp = 10;
  bool has_pointincoordprop() const;
  void clear_pointincoordprop();
  static const int kPointInCoordPropFieldNumber = 10;
  const ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties& pointincoordprop() const;
  ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* release_pointincoordprop();
  ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* mutable_pointincoordprop();
  void set_allocated_pointincoordprop(::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* pointincoordprop);

  // required .WAYPOINT_ACTION_CTRL.ActionType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::WAYPOINT_ACTION_CTRL::ActionType type() const;
  void set_type(::WAYPOINT_ACTION_CTRL::ActionType value);

  // optional uint32 actionID = 2;
  bool has_actionid() const;
  void clear_actionid();
  static const int kActionIDFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 actionid() const;
  void set_actionid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 actionTime = 3;
  bool has_actiontime() const;
  void clear_actiontime();
  static const int kActionTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 actiontime() const;
  void set_actiontime(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 subjID = 5;
  bool has_subjid() const;
  void clear_subjid();
  static const int kSubjIDFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 subjid() const;
  void set_subjid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .WAYPOINT_ACTION_CTRL.Priority actionPriority = 6;
  bool has_actionpriority() const;
  void clear_actionpriority();
  static const int kActionPriorityFieldNumber = 6;
  ::WAYPOINT_ACTION_CTRL::Priority actionpriority() const;
  void set_actionpriority(::WAYPOINT_ACTION_CTRL::Priority value);

  // optional uint32 actionsCount = 4 [default = 1];
  bool has_actionscount() const;
  void clear_actionscount();
  static const int kActionsCountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 actionscount() const;
  void set_actionscount(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.ActionInPoint)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* circleinpointprop_;
  ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* courseinpointprop_;
  ::WAYPOINT_ACTION_CTRL::ServoProperties* servoprop_;
  ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* pointincoordprop_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actiontime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subjid_;
  int actionpriority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actionscount_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// -------------------------------------------------------------------

class CircleInPointProperties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.CircleInPointProperties) */ {
 public:
  CircleInPointProperties();
  virtual ~CircleInPointProperties();

  CircleInPointProperties(const CircleInPointProperties& from);
  CircleInPointProperties(CircleInPointProperties&& from) noexcept
    : CircleInPointProperties() {
    *this = ::std::move(from);
  }

  inline CircleInPointProperties& operator=(const CircleInPointProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircleInPointProperties& operator=(CircleInPointProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CircleInPointProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CircleInPointProperties* internal_default_instance() {
    return reinterpret_cast<const CircleInPointProperties*>(
               &_CircleInPointProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CircleInPointProperties* other);
  friend void swap(CircleInPointProperties& a, CircleInPointProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CircleInPointProperties* New() const final {
    return CreateMaybeMessage<CircleInPointProperties>(nullptr);
  }

  CircleInPointProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CircleInPointProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CircleInPointProperties& from);
  void MergeFrom(const CircleInPointProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircleInPointProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.CircleInPointProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float radiusMeters = 1;
  bool has_radiusmeters() const;
  void clear_radiusmeters();
  static const int kRadiusMetersFieldNumber = 1;
  float radiusmeters() const;
  void set_radiusmeters(float value);

  // optional float azimuthDegrees = 2;
  bool has_azimuthdegrees() const;
  void clear_azimuthdegrees();
  static const int kAzimuthDegreesFieldNumber = 2;
  float azimuthdegrees() const;
  void set_azimuthdegrees(float value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float radiusmeters_;
  float azimuthdegrees_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// -------------------------------------------------------------------

class CourseInPointProperties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.CourseInPointProperties) */ {
 public:
  CourseInPointProperties();
  virtual ~CourseInPointProperties();

  CourseInPointProperties(const CourseInPointProperties& from);
  CourseInPointProperties(CourseInPointProperties&& from) noexcept
    : CourseInPointProperties() {
    *this = ::std::move(from);
  }

  inline CourseInPointProperties& operator=(const CourseInPointProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline CourseInPointProperties& operator=(CourseInPointProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CourseInPointProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CourseInPointProperties* internal_default_instance() {
    return reinterpret_cast<const CourseInPointProperties*>(
               &_CourseInPointProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CourseInPointProperties* other);
  friend void swap(CourseInPointProperties& a, CourseInPointProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CourseInPointProperties* New() const final {
    return CreateMaybeMessage<CourseInPointProperties>(nullptr);
  }

  CourseInPointProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CourseInPointProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CourseInPointProperties& from);
  void MergeFrom(const CourseInPointProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CourseInPointProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.CourseInPointProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float azimuthDegrees = 1;
  bool has_azimuthdegrees() const;
  void clear_azimuthdegrees();
  static const int kAzimuthDegreesFieldNumber = 1;
  float azimuthdegrees() const;
  void set_azimuthdegrees(float value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float azimuthdegrees_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// -------------------------------------------------------------------

class ServoProperties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.ServoProperties) */ {
 public:
  ServoProperties();
  virtual ~ServoProperties();

  ServoProperties(const ServoProperties& from);
  ServoProperties(ServoProperties&& from) noexcept
    : ServoProperties() {
    *this = ::std::move(from);
  }

  inline ServoProperties& operator=(const ServoProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoProperties& operator=(ServoProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoProperties* internal_default_instance() {
    return reinterpret_cast<const ServoProperties*>(
               &_ServoProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServoProperties* other);
  friend void swap(ServoProperties& a, ServoProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoProperties* New() const final {
    return CreateMaybeMessage<ServoProperties>(nullptr);
  }

  ServoProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoProperties& from);
  void MergeFrom(const ServoProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.ServoProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float targetAngle = 1;
  bool has_targetangle() const;
  void clear_targetangle();
  static const int kTargetAngleFieldNumber = 1;
  float targetangle() const;
  void set_targetangle(float value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.ServoProperties)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float targetangle_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// -------------------------------------------------------------------

class PointInCoordinateProperties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties) */ {
 public:
  PointInCoordinateProperties();
  virtual ~PointInCoordinateProperties();

  PointInCoordinateProperties(const PointInCoordinateProperties& from);
  PointInCoordinateProperties(PointInCoordinateProperties&& from) noexcept
    : PointInCoordinateProperties() {
    *this = ::std::move(from);
  }

  inline PointInCoordinateProperties& operator=(const PointInCoordinateProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointInCoordinateProperties& operator=(PointInCoordinateProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointInCoordinateProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointInCoordinateProperties* internal_default_instance() {
    return reinterpret_cast<const PointInCoordinateProperties*>(
               &_PointInCoordinateProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PointInCoordinateProperties* other);
  friend void swap(PointInCoordinateProperties& a, PointInCoordinateProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointInCoordinateProperties* New() const final {
    return CreateMaybeMessage<PointInCoordinateProperties>(nullptr);
  }

  PointInCoordinateProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointInCoordinateProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointInCoordinateProperties& from);
  void MergeFrom(const PointInCoordinateProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointInCoordinateProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.PointInCoordinateProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double latitude_;
  double longitude_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// -------------------------------------------------------------------

class MoveToPointRequestResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult) */ {
 public:
  MoveToPointRequestResult();
  virtual ~MoveToPointRequestResult();

  MoveToPointRequestResult(const MoveToPointRequestResult& from);
  MoveToPointRequestResult(MoveToPointRequestResult&& from) noexcept
    : MoveToPointRequestResult() {
    *this = ::std::move(from);
  }

  inline MoveToPointRequestResult& operator=(const MoveToPointRequestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToPointRequestResult& operator=(MoveToPointRequestResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveToPointRequestResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveToPointRequestResult* internal_default_instance() {
    return reinterpret_cast<const MoveToPointRequestResult*>(
               &_MoveToPointRequestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MoveToPointRequestResult* other);
  friend void swap(MoveToPointRequestResult& a, MoveToPointRequestResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveToPointRequestResult* New() const final {
    return CreateMaybeMessage<MoveToPointRequestResult>(nullptr);
  }

  MoveToPointRequestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveToPointRequestResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveToPointRequestResult& from);
  void MergeFrom(const MoveToPointRequestResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveToPointRequestResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.MoveToPointRequestResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MoveToPointRequestResult_Result Result;
  static constexpr Result Result_Undefined =
    MoveToPointRequestResult_Result_Result_Undefined;
  static constexpr Result Result_Accepted =
    MoveToPointRequestResult_Result_Result_Accepted;
  static constexpr Result Result_Rejected =
    MoveToPointRequestResult_Result_Result_Rejected;
  static inline bool Result_IsValid(int value) {
    return MoveToPointRequestResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    MoveToPointRequestResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    MoveToPointRequestResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    MoveToPointRequestResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return MoveToPointRequestResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return MoveToPointRequestResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return MoveToPointRequestResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.Result result = 1 [default = Result_Undefined];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result result() const;
  void set_result(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// -------------------------------------------------------------------

class ActionInPointResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.ActionInPointResult) */ {
 public:
  ActionInPointResult();
  virtual ~ActionInPointResult();

  ActionInPointResult(const ActionInPointResult& from);
  ActionInPointResult(ActionInPointResult&& from) noexcept
    : ActionInPointResult() {
    *this = ::std::move(from);
  }

  inline ActionInPointResult& operator=(const ActionInPointResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionInPointResult& operator=(ActionInPointResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionInPointResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionInPointResult* internal_default_instance() {
    return reinterpret_cast<const ActionInPointResult*>(
               &_ActionInPointResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ActionInPointResult* other);
  friend void swap(ActionInPointResult& a, ActionInPointResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionInPointResult* New() const final {
    return CreateMaybeMessage<ActionInPointResult>(nullptr);
  }

  ActionInPointResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionInPointResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionInPointResult& from);
  void MergeFrom(const ActionInPointResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionInPointResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.ActionInPointResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ActionInPointResult_Result Result;
  static constexpr Result ActionFinished =
    ActionInPointResult_Result_ActionFinished;
  static constexpr Result AllActionsFinished =
    ActionInPointResult_Result_AllActionsFinished;
  static inline bool Result_IsValid(int value) {
    return ActionInPointResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ActionInPointResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ActionInPointResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ActionInPointResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ActionInPointResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ActionInPointResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return ActionInPointResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult.Result result = 1 [default = ActionFinished];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result result() const;
  void set_result(::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result value);

  // optional uint32 actionID = 2;
  bool has_actionid() const;
  void clear_actionid();
  static const int kActionIDFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 actionid() const;
  void set_actionid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool success = 3;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.ActionInPointResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actionid_;
  bool success_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// -------------------------------------------------------------------

class Ctrl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WAYPOINT_ACTION_CTRL.Ctrl) */ {
 public:
  Ctrl();
  virtual ~Ctrl();

  Ctrl(const Ctrl& from);
  Ctrl(Ctrl&& from) noexcept
    : Ctrl() {
    *this = ::std::move(from);
  }

  inline Ctrl& operator=(const Ctrl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ctrl& operator=(Ctrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ctrl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ctrl* internal_default_instance() {
    return reinterpret_cast<const Ctrl*>(
               &_Ctrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Ctrl* other);
  friend void swap(Ctrl& a, Ctrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ctrl* New() const final {
    return CreateMaybeMessage<Ctrl>(nullptr);
  }

  Ctrl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ctrl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ctrl& from);
  void MergeFrom(const Ctrl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ctrl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WAYPOINT_ACTION_CTRL.Ctrl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WaypointActionCtrl_2eproto);
    return ::descriptor_table_WaypointActionCtrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequest request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  const ::WAYPOINT_ACTION_CTRL::MoveToPointRequest& request() const;
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* release_request();
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* mutable_request();
  void set_allocated_request(::WAYPOINT_ACTION_CTRL::MoveToPointRequest* request);

  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult requestResult = 3;
  bool has_requestresult() const;
  void clear_requestresult();
  static const int kRequestResultFieldNumber = 3;
  const ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult& requestresult() const;
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* release_requestresult();
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* mutable_requestresult();
  void set_allocated_requestresult(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* requestresult);

  // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult actionResult = 4;
  bool has_actionresult() const;
  void clear_actionresult();
  static const int kActionResultFieldNumber = 4;
  const ::WAYPOINT_ACTION_CTRL::ActionInPointResult& actionresult() const;
  ::WAYPOINT_ACTION_CTRL::ActionInPointResult* release_actionresult();
  ::WAYPOINT_ACTION_CTRL::ActionInPointResult* mutable_actionresult();
  void set_allocated_actionresult(::WAYPOINT_ACTION_CTRL::ActionInPointResult* actionresult);

  // required uint32 boardId = 1;
  bool has_boardid() const;
  void clear_boardid();
  static const int kBoardIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 boardid() const;
  void set_boardid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:WAYPOINT_ACTION_CTRL.Ctrl)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* request_;
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* requestresult_;
  ::WAYPOINT_ACTION_CTRL::ActionInPointResult* actionresult_;
  ::PROTOBUF_NAMESPACE_ID::uint32 boardid_;
  friend struct ::TableStruct_WaypointActionCtrl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MoveToPointRequest

// optional double latitude = 1;
inline bool MoveToPointRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveToPointRequest::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double MoveToPointRequest::latitude() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.MoveToPointRequest.latitude)
  return latitude_;
}
inline void MoveToPointRequest::set_latitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.MoveToPointRequest.latitude)
}

// optional double longitude = 2;
inline bool MoveToPointRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveToPointRequest::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double MoveToPointRequest::longitude() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.MoveToPointRequest.longitude)
  return longitude_;
}
inline void MoveToPointRequest::set_longitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.MoveToPointRequest.longitude)
}

// optional float altitude = 3;
inline bool MoveToPointRequest::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveToPointRequest::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MoveToPointRequest::altitude() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.MoveToPointRequest.altitude)
  return altitude_;
}
inline void MoveToPointRequest::set_altitude(float value) {
  _has_bits_[0] |= 0x00000004u;
  altitude_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.MoveToPointRequest.altitude)
}

// optional float course = 4;
inline bool MoveToPointRequest::has_course() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoveToPointRequest::clear_course() {
  course_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MoveToPointRequest::course() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.MoveToPointRequest.course)
  return course_;
}
inline void MoveToPointRequest::set_course(float value) {
  _has_bits_[0] |= 0x00000008u;
  course_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.MoveToPointRequest.course)
}

// optional float speed = 5;
inline bool MoveToPointRequest::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoveToPointRequest::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MoveToPointRequest::speed() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.MoveToPointRequest.speed)
  return speed_;
}
inline void MoveToPointRequest::set_speed(float value) {
  _has_bits_[0] |= 0x00000010u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.MoveToPointRequest.speed)
}

// repeated .WAYPOINT_ACTION_CTRL.ActionInPoint actions = 6;
inline int MoveToPointRequest::actions_size() const {
  return actions_.size();
}
inline void MoveToPointRequest::clear_actions() {
  actions_.Clear();
}
inline ::WAYPOINT_ACTION_CTRL::ActionInPoint* MoveToPointRequest::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:WAYPOINT_ACTION_CTRL.MoveToPointRequest.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WAYPOINT_ACTION_CTRL::ActionInPoint >*
MoveToPointRequest::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:WAYPOINT_ACTION_CTRL.MoveToPointRequest.actions)
  return &actions_;
}
inline const ::WAYPOINT_ACTION_CTRL::ActionInPoint& MoveToPointRequest::actions(int index) const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.MoveToPointRequest.actions)
  return actions_.Get(index);
}
inline ::WAYPOINT_ACTION_CTRL::ActionInPoint* MoveToPointRequest::add_actions() {
  // @@protoc_insertion_point(field_add:WAYPOINT_ACTION_CTRL.MoveToPointRequest.actions)
  return actions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WAYPOINT_ACTION_CTRL::ActionInPoint >&
MoveToPointRequest::actions() const {
  // @@protoc_insertion_point(field_list:WAYPOINT_ACTION_CTRL.MoveToPointRequest.actions)
  return actions_;
}

// -------------------------------------------------------------------

// ActionInPoint

// required .WAYPOINT_ACTION_CTRL.ActionType type = 1;
inline bool ActionInPoint::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActionInPoint::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::WAYPOINT_ACTION_CTRL::ActionType ActionInPoint::type() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.type)
  return static_cast< ::WAYPOINT_ACTION_CTRL::ActionType >(type_);
}
inline void ActionInPoint::set_type(::WAYPOINT_ACTION_CTRL::ActionType value) {
  assert(::WAYPOINT_ACTION_CTRL::ActionType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPoint.type)
}

// optional uint32 actionID = 2;
inline bool ActionInPoint::has_actionid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActionInPoint::clear_actionid() {
  actionid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionInPoint::actionid() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.actionID)
  return actionid_;
}
inline void ActionInPoint::set_actionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  actionid_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPoint.actionID)
}

// optional uint32 actionTime = 3;
inline bool ActionInPoint::has_actiontime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActionInPoint::clear_actiontime() {
  actiontime_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionInPoint::actiontime() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.actionTime)
  return actiontime_;
}
inline void ActionInPoint::set_actiontime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  actiontime_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPoint.actionTime)
}

// optional uint32 actionsCount = 4 [default = 1];
inline bool ActionInPoint::has_actionscount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ActionInPoint::clear_actionscount() {
  actionscount_ = 1u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionInPoint::actionscount() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.actionsCount)
  return actionscount_;
}
inline void ActionInPoint::set_actionscount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  actionscount_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPoint.actionsCount)
}

// optional uint32 subjID = 5;
inline bool ActionInPoint::has_subjid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ActionInPoint::clear_subjid() {
  subjid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionInPoint::subjid() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.subjID)
  return subjid_;
}
inline void ActionInPoint::set_subjid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  subjid_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPoint.subjID)
}

// optional .WAYPOINT_ACTION_CTRL.Priority actionPriority = 6;
inline bool ActionInPoint::has_actionpriority() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ActionInPoint::clear_actionpriority() {
  actionpriority_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::WAYPOINT_ACTION_CTRL::Priority ActionInPoint::actionpriority() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.actionPriority)
  return static_cast< ::WAYPOINT_ACTION_CTRL::Priority >(actionpriority_);
}
inline void ActionInPoint::set_actionpriority(::WAYPOINT_ACTION_CTRL::Priority value) {
  assert(::WAYPOINT_ACTION_CTRL::Priority_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  actionpriority_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPoint.actionPriority)
}

// optional .WAYPOINT_ACTION_CTRL.CircleInPointProperties circleinPointProp = 7;
inline bool ActionInPoint::has_circleinpointprop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionInPoint::clear_circleinpointprop() {
  if (circleinpointprop_ != nullptr) circleinpointprop_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::WAYPOINT_ACTION_CTRL::CircleInPointProperties& ActionInPoint::circleinpointprop() const {
  const ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* p = circleinpointprop_;
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.circleinPointProp)
  return p != nullptr ? *p : *reinterpret_cast<const ::WAYPOINT_ACTION_CTRL::CircleInPointProperties*>(
      &::WAYPOINT_ACTION_CTRL::_CircleInPointProperties_default_instance_);
}
inline ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* ActionInPoint::release_circleinpointprop() {
  // @@protoc_insertion_point(field_release:WAYPOINT_ACTION_CTRL.ActionInPoint.circleinPointProp)
  _has_bits_[0] &= ~0x00000001u;
  ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* temp = circleinpointprop_;
  circleinpointprop_ = nullptr;
  return temp;
}
inline ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* ActionInPoint::mutable_circleinpointprop() {
  _has_bits_[0] |= 0x00000001u;
  if (circleinpointprop_ == nullptr) {
    auto* p = CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::CircleInPointProperties>(GetArenaNoVirtual());
    circleinpointprop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WAYPOINT_ACTION_CTRL.ActionInPoint.circleinPointProp)
  return circleinpointprop_;
}
inline void ActionInPoint::set_allocated_circleinpointprop(::WAYPOINT_ACTION_CTRL::CircleInPointProperties* circleinpointprop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete circleinpointprop_;
  }
  if (circleinpointprop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      circleinpointprop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circleinpointprop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  circleinpointprop_ = circleinpointprop;
  // @@protoc_insertion_point(field_set_allocated:WAYPOINT_ACTION_CTRL.ActionInPoint.circleinPointProp)
}

// optional .WAYPOINT_ACTION_CTRL.CourseInPointProperties courseinPointProp = 8;
inline bool ActionInPoint::has_courseinpointprop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionInPoint::clear_courseinpointprop() {
  if (courseinpointprop_ != nullptr) courseinpointprop_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::WAYPOINT_ACTION_CTRL::CourseInPointProperties& ActionInPoint::courseinpointprop() const {
  const ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* p = courseinpointprop_;
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.courseinPointProp)
  return p != nullptr ? *p : *reinterpret_cast<const ::WAYPOINT_ACTION_CTRL::CourseInPointProperties*>(
      &::WAYPOINT_ACTION_CTRL::_CourseInPointProperties_default_instance_);
}
inline ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* ActionInPoint::release_courseinpointprop() {
  // @@protoc_insertion_point(field_release:WAYPOINT_ACTION_CTRL.ActionInPoint.courseinPointProp)
  _has_bits_[0] &= ~0x00000002u;
  ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* temp = courseinpointprop_;
  courseinpointprop_ = nullptr;
  return temp;
}
inline ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* ActionInPoint::mutable_courseinpointprop() {
  _has_bits_[0] |= 0x00000002u;
  if (courseinpointprop_ == nullptr) {
    auto* p = CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::CourseInPointProperties>(GetArenaNoVirtual());
    courseinpointprop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WAYPOINT_ACTION_CTRL.ActionInPoint.courseinPointProp)
  return courseinpointprop_;
}
inline void ActionInPoint::set_allocated_courseinpointprop(::WAYPOINT_ACTION_CTRL::CourseInPointProperties* courseinpointprop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete courseinpointprop_;
  }
  if (courseinpointprop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      courseinpointprop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, courseinpointprop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  courseinpointprop_ = courseinpointprop;
  // @@protoc_insertion_point(field_set_allocated:WAYPOINT_ACTION_CTRL.ActionInPoint.courseinPointProp)
}

// optional .WAYPOINT_ACTION_CTRL.ServoProperties servoProp = 9;
inline bool ActionInPoint::has_servoprop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionInPoint::clear_servoprop() {
  if (servoprop_ != nullptr) servoprop_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::WAYPOINT_ACTION_CTRL::ServoProperties& ActionInPoint::servoprop() const {
  const ::WAYPOINT_ACTION_CTRL::ServoProperties* p = servoprop_;
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.servoProp)
  return p != nullptr ? *p : *reinterpret_cast<const ::WAYPOINT_ACTION_CTRL::ServoProperties*>(
      &::WAYPOINT_ACTION_CTRL::_ServoProperties_default_instance_);
}
inline ::WAYPOINT_ACTION_CTRL::ServoProperties* ActionInPoint::release_servoprop() {
  // @@protoc_insertion_point(field_release:WAYPOINT_ACTION_CTRL.ActionInPoint.servoProp)
  _has_bits_[0] &= ~0x00000004u;
  ::WAYPOINT_ACTION_CTRL::ServoProperties* temp = servoprop_;
  servoprop_ = nullptr;
  return temp;
}
inline ::WAYPOINT_ACTION_CTRL::ServoProperties* ActionInPoint::mutable_servoprop() {
  _has_bits_[0] |= 0x00000004u;
  if (servoprop_ == nullptr) {
    auto* p = CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::ServoProperties>(GetArenaNoVirtual());
    servoprop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WAYPOINT_ACTION_CTRL.ActionInPoint.servoProp)
  return servoprop_;
}
inline void ActionInPoint::set_allocated_servoprop(::WAYPOINT_ACTION_CTRL::ServoProperties* servoprop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete servoprop_;
  }
  if (servoprop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      servoprop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servoprop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  servoprop_ = servoprop;
  // @@protoc_insertion_point(field_set_allocated:WAYPOINT_ACTION_CTRL.ActionInPoint.servoProp)
}

// optional .WAYPOINT_ACTION_CTRL.PointInCoordinateProperties pointInCoordProp = 10;
inline bool ActionInPoint::has_pointincoordprop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionInPoint::clear_pointincoordprop() {
  if (pointincoordprop_ != nullptr) pointincoordprop_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties& ActionInPoint::pointincoordprop() const {
  const ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* p = pointincoordprop_;
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPoint.pointInCoordProp)
  return p != nullptr ? *p : *reinterpret_cast<const ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties*>(
      &::WAYPOINT_ACTION_CTRL::_PointInCoordinateProperties_default_instance_);
}
inline ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* ActionInPoint::release_pointincoordprop() {
  // @@protoc_insertion_point(field_release:WAYPOINT_ACTION_CTRL.ActionInPoint.pointInCoordProp)
  _has_bits_[0] &= ~0x00000008u;
  ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* temp = pointincoordprop_;
  pointincoordprop_ = nullptr;
  return temp;
}
inline ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* ActionInPoint::mutable_pointincoordprop() {
  _has_bits_[0] |= 0x00000008u;
  if (pointincoordprop_ == nullptr) {
    auto* p = CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties>(GetArenaNoVirtual());
    pointincoordprop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WAYPOINT_ACTION_CTRL.ActionInPoint.pointInCoordProp)
  return pointincoordprop_;
}
inline void ActionInPoint::set_allocated_pointincoordprop(::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* pointincoordprop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pointincoordprop_;
  }
  if (pointincoordprop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointincoordprop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointincoordprop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pointincoordprop_ = pointincoordprop;
  // @@protoc_insertion_point(field_set_allocated:WAYPOINT_ACTION_CTRL.ActionInPoint.pointInCoordProp)
}

// -------------------------------------------------------------------

// CircleInPointProperties

// optional float radiusMeters = 1;
inline bool CircleInPointProperties::has_radiusmeters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CircleInPointProperties::clear_radiusmeters() {
  radiusmeters_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CircleInPointProperties::radiusmeters() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.CircleInPointProperties.radiusMeters)
  return radiusmeters_;
}
inline void CircleInPointProperties::set_radiusmeters(float value) {
  _has_bits_[0] |= 0x00000001u;
  radiusmeters_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.CircleInPointProperties.radiusMeters)
}

// optional float azimuthDegrees = 2;
inline bool CircleInPointProperties::has_azimuthdegrees() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CircleInPointProperties::clear_azimuthdegrees() {
  azimuthdegrees_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CircleInPointProperties::azimuthdegrees() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.CircleInPointProperties.azimuthDegrees)
  return azimuthdegrees_;
}
inline void CircleInPointProperties::set_azimuthdegrees(float value) {
  _has_bits_[0] |= 0x00000002u;
  azimuthdegrees_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.CircleInPointProperties.azimuthDegrees)
}

// -------------------------------------------------------------------

// CourseInPointProperties

// optional float azimuthDegrees = 1;
inline bool CourseInPointProperties::has_azimuthdegrees() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CourseInPointProperties::clear_azimuthdegrees() {
  azimuthdegrees_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CourseInPointProperties::azimuthdegrees() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.CourseInPointProperties.azimuthDegrees)
  return azimuthdegrees_;
}
inline void CourseInPointProperties::set_azimuthdegrees(float value) {
  _has_bits_[0] |= 0x00000001u;
  azimuthdegrees_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.CourseInPointProperties.azimuthDegrees)
}

// -------------------------------------------------------------------

// ServoProperties

// optional float targetAngle = 1;
inline bool ServoProperties::has_targetangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServoProperties::clear_targetangle() {
  targetangle_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ServoProperties::targetangle() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ServoProperties.targetAngle)
  return targetangle_;
}
inline void ServoProperties::set_targetangle(float value) {
  _has_bits_[0] |= 0x00000001u;
  targetangle_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ServoProperties.targetAngle)
}

// -------------------------------------------------------------------

// PointInCoordinateProperties

// optional double latitude = 1;
inline bool PointInCoordinateProperties::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointInCoordinateProperties::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PointInCoordinateProperties::latitude() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties.latitude)
  return latitude_;
}
inline void PointInCoordinateProperties::set_latitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties.latitude)
}

// optional double longitude = 2;
inline bool PointInCoordinateProperties::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointInCoordinateProperties::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PointInCoordinateProperties::longitude() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties.longitude)
  return longitude_;
}
inline void PointInCoordinateProperties::set_longitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties.longitude)
}

// -------------------------------------------------------------------

// MoveToPointRequestResult

// optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.Result result = 1 [default = Result_Undefined];
inline bool MoveToPointRequestResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveToPointRequestResult::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result MoveToPointRequestResult::result() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.result)
  return static_cast< ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result >(result_);
}
inline void MoveToPointRequestResult::set_result(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result value) {
  assert(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.result)
}

// -------------------------------------------------------------------

// ActionInPointResult

// optional .WAYPOINT_ACTION_CTRL.ActionInPointResult.Result result = 1 [default = ActionFinished];
inline bool ActionInPointResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionInPointResult::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result ActionInPointResult::result() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPointResult.result)
  return static_cast< ::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result >(result_);
}
inline void ActionInPointResult::set_result(::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result value) {
  assert(::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPointResult.result)
}

// optional uint32 actionID = 2;
inline bool ActionInPointResult::has_actionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionInPointResult::clear_actionid() {
  actionid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionInPointResult::actionid() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPointResult.actionID)
  return actionid_;
}
inline void ActionInPointResult::set_actionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  actionid_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPointResult.actionID)
}

// optional bool success = 3;
inline bool ActionInPointResult::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionInPointResult::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ActionInPointResult::success() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.ActionInPointResult.success)
  return success_;
}
inline void ActionInPointResult::set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.ActionInPointResult.success)
}

// -------------------------------------------------------------------

// Ctrl

// required uint32 boardId = 1;
inline bool Ctrl::has_boardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ctrl::clear_boardid() {
  boardid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ctrl::boardid() const {
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.Ctrl.boardId)
  return boardid_;
}
inline void Ctrl::set_boardid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  boardid_ = value;
  // @@protoc_insertion_point(field_set:WAYPOINT_ACTION_CTRL.Ctrl.boardId)
}

// optional .WAYPOINT_ACTION_CTRL.MoveToPointRequest request = 2;
inline bool Ctrl::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ctrl::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::WAYPOINT_ACTION_CTRL::MoveToPointRequest& Ctrl::request() const {
  const ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* p = request_;
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.Ctrl.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::WAYPOINT_ACTION_CTRL::MoveToPointRequest*>(
      &::WAYPOINT_ACTION_CTRL::_MoveToPointRequest_default_instance_);
}
inline ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* Ctrl::release_request() {
  // @@protoc_insertion_point(field_release:WAYPOINT_ACTION_CTRL.Ctrl.request)
  _has_bits_[0] &= ~0x00000001u;
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* Ctrl::mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::MoveToPointRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WAYPOINT_ACTION_CTRL.Ctrl.request)
  return request_;
}
inline void Ctrl::set_allocated_request(::WAYPOINT_ACTION_CTRL::MoveToPointRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:WAYPOINT_ACTION_CTRL.Ctrl.request)
}

// optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult requestResult = 3;
inline bool Ctrl::has_requestresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ctrl::clear_requestresult() {
  if (requestresult_ != nullptr) requestresult_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult& Ctrl::requestresult() const {
  const ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* p = requestresult_;
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.Ctrl.requestResult)
  return p != nullptr ? *p : *reinterpret_cast<const ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult*>(
      &::WAYPOINT_ACTION_CTRL::_MoveToPointRequestResult_default_instance_);
}
inline ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* Ctrl::release_requestresult() {
  // @@protoc_insertion_point(field_release:WAYPOINT_ACTION_CTRL.Ctrl.requestResult)
  _has_bits_[0] &= ~0x00000002u;
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* temp = requestresult_;
  requestresult_ = nullptr;
  return temp;
}
inline ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* Ctrl::mutable_requestresult() {
  _has_bits_[0] |= 0x00000002u;
  if (requestresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult>(GetArenaNoVirtual());
    requestresult_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WAYPOINT_ACTION_CTRL.Ctrl.requestResult)
  return requestresult_;
}
inline void Ctrl::set_allocated_requestresult(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* requestresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete requestresult_;
  }
  if (requestresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requestresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestresult, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  requestresult_ = requestresult;
  // @@protoc_insertion_point(field_set_allocated:WAYPOINT_ACTION_CTRL.Ctrl.requestResult)
}

// optional .WAYPOINT_ACTION_CTRL.ActionInPointResult actionResult = 4;
inline bool Ctrl::has_actionresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ctrl::clear_actionresult() {
  if (actionresult_ != nullptr) actionresult_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::WAYPOINT_ACTION_CTRL::ActionInPointResult& Ctrl::actionresult() const {
  const ::WAYPOINT_ACTION_CTRL::ActionInPointResult* p = actionresult_;
  // @@protoc_insertion_point(field_get:WAYPOINT_ACTION_CTRL.Ctrl.actionResult)
  return p != nullptr ? *p : *reinterpret_cast<const ::WAYPOINT_ACTION_CTRL::ActionInPointResult*>(
      &::WAYPOINT_ACTION_CTRL::_ActionInPointResult_default_instance_);
}
inline ::WAYPOINT_ACTION_CTRL::ActionInPointResult* Ctrl::release_actionresult() {
  // @@protoc_insertion_point(field_release:WAYPOINT_ACTION_CTRL.Ctrl.actionResult)
  _has_bits_[0] &= ~0x00000004u;
  ::WAYPOINT_ACTION_CTRL::ActionInPointResult* temp = actionresult_;
  actionresult_ = nullptr;
  return temp;
}
inline ::WAYPOINT_ACTION_CTRL::ActionInPointResult* Ctrl::mutable_actionresult() {
  _has_bits_[0] |= 0x00000004u;
  if (actionresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::WAYPOINT_ACTION_CTRL::ActionInPointResult>(GetArenaNoVirtual());
    actionresult_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WAYPOINT_ACTION_CTRL.Ctrl.actionResult)
  return actionresult_;
}
inline void Ctrl::set_allocated_actionresult(::WAYPOINT_ACTION_CTRL::ActionInPointResult* actionresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete actionresult_;
  }
  if (actionresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actionresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actionresult, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  actionresult_ = actionresult;
  // @@protoc_insertion_point(field_set_allocated:WAYPOINT_ACTION_CTRL.Ctrl.actionResult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WAYPOINT_ACTION_CTRL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result>() {
  return ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result_descriptor();
}
template <> struct is_proto_enum< ::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result>() {
  return ::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result_descriptor();
}
template <> struct is_proto_enum< ::WAYPOINT_ACTION_CTRL::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WAYPOINT_ACTION_CTRL::ActionType>() {
  return ::WAYPOINT_ACTION_CTRL::ActionType_descriptor();
}
template <> struct is_proto_enum< ::WAYPOINT_ACTION_CTRL::Priority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WAYPOINT_ACTION_CTRL::Priority>() {
  return ::WAYPOINT_ACTION_CTRL::Priority_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WaypointActionCtrl_2eproto
