// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WaypointActionCtrl.proto

#include "WaypointActionCtrl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ActionInPoint_WaypointActionCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionInPointResult_WaypointActionCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CircleInPointProperties_WaypointActionCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CourseInPointProperties_WaypointActionCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveToPointRequest_WaypointActionCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveToPointRequestResult_WaypointActionCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointInCoordinateProperties_WaypointActionCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WaypointActionCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServoProperties_WaypointActionCtrl_2eproto;
namespace WAYPOINT_ACTION_CTRL {
class MoveToPointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveToPointRequest> _instance;
} _MoveToPointRequest_default_instance_;
class ActionInPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionInPoint> _instance;
} _ActionInPoint_default_instance_;
class CircleInPointPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CircleInPointProperties> _instance;
} _CircleInPointProperties_default_instance_;
class CourseInPointPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CourseInPointProperties> _instance;
} _CourseInPointProperties_default_instance_;
class ServoPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServoProperties> _instance;
} _ServoProperties_default_instance_;
class PointInCoordinatePropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointInCoordinateProperties> _instance;
} _PointInCoordinateProperties_default_instance_;
class MoveToPointRequestResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveToPointRequestResult> _instance;
} _MoveToPointRequestResult_default_instance_;
class ActionInPointResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionInPointResult> _instance;
} _ActionInPointResult_default_instance_;
class CtrlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ctrl> _instance;
} _Ctrl_default_instance_;
}  // namespace WAYPOINT_ACTION_CTRL
static void InitDefaultsscc_info_ActionInPoint_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_ActionInPoint_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::ActionInPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::ActionInPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ActionInPoint_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ActionInPoint_WaypointActionCtrl_2eproto}, {
      &scc_info_CircleInPointProperties_WaypointActionCtrl_2eproto.base,
      &scc_info_CourseInPointProperties_WaypointActionCtrl_2eproto.base,
      &scc_info_ServoProperties_WaypointActionCtrl_2eproto.base,
      &scc_info_PointInCoordinateProperties_WaypointActionCtrl_2eproto.base,}};

static void InitDefaultsscc_info_ActionInPointResult_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_ActionInPointResult_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::ActionInPointResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::ActionInPointResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionInPointResult_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActionInPointResult_WaypointActionCtrl_2eproto}, {}};

static void InitDefaultsscc_info_CircleInPointProperties_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_CircleInPointProperties_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::CircleInPointProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::CircleInPointProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CircleInPointProperties_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CircleInPointProperties_WaypointActionCtrl_2eproto}, {}};

static void InitDefaultsscc_info_CourseInPointProperties_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_CourseInPointProperties_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::CourseInPointProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::CourseInPointProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CourseInPointProperties_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CourseInPointProperties_WaypointActionCtrl_2eproto}, {}};

static void InitDefaultsscc_info_Ctrl_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_Ctrl_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::Ctrl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::Ctrl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Ctrl_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Ctrl_WaypointActionCtrl_2eproto}, {
      &scc_info_MoveToPointRequest_WaypointActionCtrl_2eproto.base,
      &scc_info_MoveToPointRequestResult_WaypointActionCtrl_2eproto.base,
      &scc_info_ActionInPointResult_WaypointActionCtrl_2eproto.base,}};

static void InitDefaultsscc_info_MoveToPointRequest_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_MoveToPointRequest_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::MoveToPointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveToPointRequest_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveToPointRequest_WaypointActionCtrl_2eproto}, {
      &scc_info_ActionInPoint_WaypointActionCtrl_2eproto.base,}};

static void InitDefaultsscc_info_MoveToPointRequestResult_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_MoveToPointRequestResult_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveToPointRequestResult_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveToPointRequestResult_WaypointActionCtrl_2eproto}, {}};

static void InitDefaultsscc_info_PointInCoordinateProperties_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_PointInCoordinateProperties_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointInCoordinateProperties_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PointInCoordinateProperties_WaypointActionCtrl_2eproto}, {}};

static void InitDefaultsscc_info_ServoProperties_WaypointActionCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WAYPOINT_ACTION_CTRL::_ServoProperties_default_instance_;
    new (ptr) ::WAYPOINT_ACTION_CTRL::ServoProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WAYPOINT_ACTION_CTRL::ServoProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServoProperties_WaypointActionCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServoProperties_WaypointActionCtrl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_WaypointActionCtrl_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_WaypointActionCtrl_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_WaypointActionCtrl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_WaypointActionCtrl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequest, longitude_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequest, altitude_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequest, course_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequest, speed_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequest, actions_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, type_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, actionid_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, actiontime_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, actionscount_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, subjid_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, actionpriority_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, circleinpointprop_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, courseinpointprop_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, servoprop_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPoint, pointincoordprop_),
  4,
  5,
  6,
  9,
  7,
  8,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::CircleInPointProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::CircleInPointProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::CircleInPointProperties, radiusmeters_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::CircleInPointProperties, azimuthdegrees_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::CourseInPointProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::CourseInPointProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::CourseInPointProperties, azimuthdegrees_),
  0,
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ServoProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ServoProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ServoProperties, targetangle_),
  0,
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties, latitude_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties, longitude_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPointResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPointResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPointResult, result_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPointResult, actionid_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::ActionInPointResult, success_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::Ctrl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::Ctrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::Ctrl, boardid_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::Ctrl, request_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::Ctrl, requestresult_),
  PROTOBUF_FIELD_OFFSET(::WAYPOINT_ACTION_CTRL::Ctrl, actionresult_),
  3,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::WAYPOINT_ACTION_CTRL::MoveToPointRequest)},
  { 17, 32, sizeof(::WAYPOINT_ACTION_CTRL::ActionInPoint)},
  { 42, 49, sizeof(::WAYPOINT_ACTION_CTRL::CircleInPointProperties)},
  { 51, 57, sizeof(::WAYPOINT_ACTION_CTRL::CourseInPointProperties)},
  { 58, 64, sizeof(::WAYPOINT_ACTION_CTRL::ServoProperties)},
  { 65, 72, sizeof(::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties)},
  { 74, 80, sizeof(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult)},
  { 81, 89, sizeof(::WAYPOINT_ACTION_CTRL::ActionInPointResult)},
  { 92, 101, sizeof(::WAYPOINT_ACTION_CTRL::Ctrl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_MoveToPointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_ActionInPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_CircleInPointProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_CourseInPointProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_ServoProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_PointInCoordinateProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_MoveToPointRequestResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_ActionInPointResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WAYPOINT_ACTION_CTRL::_Ctrl_default_instance_),
};

const char descriptor_table_protodef_WaypointActionCtrl_2eproto[] =
  "\n\030WaypointActionCtrl.proto\022\024WAYPOINT_ACT"
  "ION_CTRL\"\240\001\n\022MoveToPointRequest\022\020\n\010latit"
  "ude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010altitude"
  "\030\003 \001(\002\022\016\n\006course\030\004 \001(\002\022\r\n\005speed\030\005 \001(\002\0224\n"
  "\007actions\030\006 \003(\0132#.WAYPOINT_ACTION_CTRL.Ac"
  "tionInPoint\"\341\003\n\rActionInPoint\022.\n\004type\030\001 "
  "\002(\0162 .WAYPOINT_ACTION_CTRL.ActionType\022\020\n"
  "\010actionID\030\002 \001(\r\022\022\n\nactionTime\030\003 \001(\r\022\027\n\014a"
  "ctionsCount\030\004 \001(\r:\0011\022\016\n\006subjID\030\005 \001(\r\0226\n\016"
  "actionPriority\030\006 \001(\0162\036.WAYPOINT_ACTION_C"
  "TRL.Priority\022H\n\021circleinPointProp\030\007 \001(\0132"
  "-.WAYPOINT_ACTION_CTRL.CircleInPointProp"
  "erties\022H\n\021courseinPointProp\030\010 \001(\0132-.WAYP"
  "OINT_ACTION_CTRL.CourseInPointProperties"
  "\0228\n\tservoProp\030\t \001(\0132%.WAYPOINT_ACTION_CT"
  "RL.ServoProperties\022K\n\020pointInCoordProp\030\n"
  " \001(\01321.WAYPOINT_ACTION_CTRL.PointInCoord"
  "inateProperties\"G\n\027CircleInPointProperti"
  "es\022\024\n\014radiusMeters\030\001 \001(\002\022\026\n\016azimuthDegre"
  "es\030\002 \001(\002\"1\n\027CourseInPointProperties\022\026\n\016a"
  "zimuthDegrees\030\001 \001(\002\"&\n\017ServoProperties\022\023"
  "\n\013targetAngle\030\001 \001(\002\"B\n\033PointInCoordinate"
  "Properties\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitud"
  "e\030\002 \001(\001\"\275\001\n\030MoveToPointRequestResult\022W\n\006"
  "result\030\001 \001(\01625.WAYPOINT_ACTION_CTRL.Move"
  "ToPointRequestResult.Result:\020Result_Unde"
  "fined\"H\n\006Result\022\024\n\020Result_Undefined\020\000\022\023\n"
  "\017Result_Accepted\020\001\022\023\n\017Result_Rejected\020\002\""
  "\300\001\n\023ActionInPointResult\022P\n\006result\030\001 \001(\0162"
  "0.WAYPOINT_ACTION_CTRL.ActionInPointResu"
  "lt.Result:\016ActionFinished\022\020\n\010actionID\030\002 "
  "\001(\r\022\017\n\007success\030\003 \001(\010\"4\n\006Result\022\022\n\016Action"
  "Finished\020\000\022\026\n\022AllActionsFinished\020\001\"\332\001\n\004C"
  "trl\022\017\n\007boardId\030\001 \002(\r\0229\n\007request\030\002 \001(\0132(."
  "WAYPOINT_ACTION_CTRL.MoveToPointRequest\022"
  "E\n\rrequestResult\030\003 \001(\0132..WAYPOINT_ACTION"
  "_CTRL.MoveToPointRequestResult\022\?\n\014action"
  "Result\030\004 \001(\0132).WAYPOINT_ACTION_CTRL.Acti"
  "onInPointResult*\205\001\n\nActionType\022\r\n\tHoldPo"
  "int\020\000\022\021\n\rCircleInPoint\020\001\022\021\n\rCourseInPoin"
  "t\020\002\022\010\n\004Drop\020\003\022\013\n\007Measure\020\004\022\t\n\005Shoot\020\005\022\t\n"
  "\005Servo\020\006\022\025\n\021PointInCoordinate\020\007*\'\n\010Prior"
  "ity\022\016\n\nAsPossible\020\000\022\013\n\007InPoint\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_WaypointActionCtrl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_WaypointActionCtrl_2eproto_sccs[9] = {
  &scc_info_ActionInPoint_WaypointActionCtrl_2eproto.base,
  &scc_info_ActionInPointResult_WaypointActionCtrl_2eproto.base,
  &scc_info_CircleInPointProperties_WaypointActionCtrl_2eproto.base,
  &scc_info_CourseInPointProperties_WaypointActionCtrl_2eproto.base,
  &scc_info_Ctrl_WaypointActionCtrl_2eproto.base,
  &scc_info_MoveToPointRequest_WaypointActionCtrl_2eproto.base,
  &scc_info_MoveToPointRequestResult_WaypointActionCtrl_2eproto.base,
  &scc_info_PointInCoordinateProperties_WaypointActionCtrl_2eproto.base,
  &scc_info_ServoProperties_WaypointActionCtrl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_WaypointActionCtrl_2eproto_once;
static bool descriptor_table_WaypointActionCtrl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WaypointActionCtrl_2eproto = {
  &descriptor_table_WaypointActionCtrl_2eproto_initialized, descriptor_table_protodef_WaypointActionCtrl_2eproto, "WaypointActionCtrl.proto", 1712,
  &descriptor_table_WaypointActionCtrl_2eproto_once, descriptor_table_WaypointActionCtrl_2eproto_sccs, descriptor_table_WaypointActionCtrl_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_WaypointActionCtrl_2eproto::offsets,
  file_level_metadata_WaypointActionCtrl_2eproto, 9, file_level_enum_descriptors_WaypointActionCtrl_2eproto, file_level_service_descriptors_WaypointActionCtrl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_WaypointActionCtrl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_WaypointActionCtrl_2eproto), true);
namespace WAYPOINT_ACTION_CTRL {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveToPointRequestResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WaypointActionCtrl_2eproto);
  return file_level_enum_descriptors_WaypointActionCtrl_2eproto[0];
}
bool MoveToPointRequestResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MoveToPointRequestResult_Result MoveToPointRequestResult::Result_Undefined;
constexpr MoveToPointRequestResult_Result MoveToPointRequestResult::Result_Accepted;
constexpr MoveToPointRequestResult_Result MoveToPointRequestResult::Result_Rejected;
constexpr MoveToPointRequestResult_Result MoveToPointRequestResult::Result_MIN;
constexpr MoveToPointRequestResult_Result MoveToPointRequestResult::Result_MAX;
constexpr int MoveToPointRequestResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionInPointResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WaypointActionCtrl_2eproto);
  return file_level_enum_descriptors_WaypointActionCtrl_2eproto[1];
}
bool ActionInPointResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActionInPointResult_Result ActionInPointResult::ActionFinished;
constexpr ActionInPointResult_Result ActionInPointResult::AllActionsFinished;
constexpr ActionInPointResult_Result ActionInPointResult::Result_MIN;
constexpr ActionInPointResult_Result ActionInPointResult::Result_MAX;
constexpr int ActionInPointResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WaypointActionCtrl_2eproto);
  return file_level_enum_descriptors_WaypointActionCtrl_2eproto[2];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Priority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WaypointActionCtrl_2eproto);
  return file_level_enum_descriptors_WaypointActionCtrl_2eproto[3];
}
bool Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MoveToPointRequest::InitAsDefaultInstance() {
}
class MoveToPointRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<MoveToPointRequest>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_course(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveToPointRequest::kLatitudeFieldNumber;
const int MoveToPointRequest::kLongitudeFieldNumber;
const int MoveToPointRequest::kAltitudeFieldNumber;
const int MoveToPointRequest::kCourseFieldNumber;
const int MoveToPointRequest::kSpeedFieldNumber;
const int MoveToPointRequest::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveToPointRequest::MoveToPointRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
}
MoveToPointRequest::MoveToPointRequest(const MoveToPointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
}

void MoveToPointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveToPointRequest_WaypointActionCtrl_2eproto.base);
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
}

MoveToPointRequest::~MoveToPointRequest() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  SharedDtor();
}

void MoveToPointRequest::SharedDtor() {
}

void MoveToPointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveToPointRequest& MoveToPointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveToPointRequest_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void MoveToPointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveToPointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          HasBitSetters::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          HasBitSetters::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float course = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_course(&has_bits);
          course_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .WAYPOINT_ACTION_CTRL.ActionInPoint actions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveToPointRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_latitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_longitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float altitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_altitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float course = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_course(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &course_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WAYPOINT_ACTION_CTRL.ActionInPoint actions = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveToPointRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional float altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->altitude(), output);
  }

  // optional float course = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->course(), output);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // repeated .WAYPOINT_ACTION_CTRL.ActionInPoint actions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->actions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveToPointRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional float altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->altitude(), target);
  }

  // optional float course = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->course(), target);
  }

  // optional float speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // repeated .WAYPOINT_ACTION_CTRL.ActionInPoint actions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->actions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  return target;
}

size_t MoveToPointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WAYPOINT_ACTION_CTRL.ActionInPoint actions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional float altitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float course = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveToPointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveToPointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveToPointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
    MergeFrom(*source);
  }
}

void MoveToPointRequest::MergeFrom(const MoveToPointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      course_ = from.course_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveToPointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveToPointRequest::CopyFrom(const MoveToPointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.MoveToPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveToPointRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->actions())) return false;
  return true;
}

void MoveToPointRequest::Swap(MoveToPointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveToPointRequest::InternalSwap(MoveToPointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(course_, other->course_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveToPointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionInPoint::InitAsDefaultInstance() {
  ::WAYPOINT_ACTION_CTRL::_ActionInPoint_default_instance_._instance.get_mutable()->circleinpointprop_ = const_cast< ::WAYPOINT_ACTION_CTRL::CircleInPointProperties*>(
      ::WAYPOINT_ACTION_CTRL::CircleInPointProperties::internal_default_instance());
  ::WAYPOINT_ACTION_CTRL::_ActionInPoint_default_instance_._instance.get_mutable()->courseinpointprop_ = const_cast< ::WAYPOINT_ACTION_CTRL::CourseInPointProperties*>(
      ::WAYPOINT_ACTION_CTRL::CourseInPointProperties::internal_default_instance());
  ::WAYPOINT_ACTION_CTRL::_ActionInPoint_default_instance_._instance.get_mutable()->servoprop_ = const_cast< ::WAYPOINT_ACTION_CTRL::ServoProperties*>(
      ::WAYPOINT_ACTION_CTRL::ServoProperties::internal_default_instance());
  ::WAYPOINT_ACTION_CTRL::_ActionInPoint_default_instance_._instance.get_mutable()->pointincoordprop_ = const_cast< ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties*>(
      ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties::internal_default_instance());
}
class ActionInPoint::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ActionInPoint>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_actionid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_actiontime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_actionscount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_subjid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_actionpriority(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::WAYPOINT_ACTION_CTRL::CircleInPointProperties& circleinpointprop(const ActionInPoint* msg);
  static void set_has_circleinpointprop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::WAYPOINT_ACTION_CTRL::CourseInPointProperties& courseinpointprop(const ActionInPoint* msg);
  static void set_has_courseinpointprop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::WAYPOINT_ACTION_CTRL::ServoProperties& servoprop(const ActionInPoint* msg);
  static void set_has_servoprop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties& pointincoordprop(const ActionInPoint* msg);
  static void set_has_pointincoordprop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::WAYPOINT_ACTION_CTRL::CircleInPointProperties&
ActionInPoint::HasBitSetters::circleinpointprop(const ActionInPoint* msg) {
  return *msg->circleinpointprop_;
}
const ::WAYPOINT_ACTION_CTRL::CourseInPointProperties&
ActionInPoint::HasBitSetters::courseinpointprop(const ActionInPoint* msg) {
  return *msg->courseinpointprop_;
}
const ::WAYPOINT_ACTION_CTRL::ServoProperties&
ActionInPoint::HasBitSetters::servoprop(const ActionInPoint* msg) {
  return *msg->servoprop_;
}
const ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties&
ActionInPoint::HasBitSetters::pointincoordprop(const ActionInPoint* msg) {
  return *msg->pointincoordprop_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionInPoint::kTypeFieldNumber;
const int ActionInPoint::kActionIDFieldNumber;
const int ActionInPoint::kActionTimeFieldNumber;
const int ActionInPoint::kActionsCountFieldNumber;
const int ActionInPoint::kSubjIDFieldNumber;
const int ActionInPoint::kActionPriorityFieldNumber;
const int ActionInPoint::kCircleinPointPropFieldNumber;
const int ActionInPoint::kCourseinPointPropFieldNumber;
const int ActionInPoint::kServoPropFieldNumber;
const int ActionInPoint::kPointInCoordPropFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionInPoint::ActionInPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.ActionInPoint)
}
ActionInPoint::ActionInPoint(const ActionInPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_circleinpointprop()) {
    circleinpointprop_ = new ::WAYPOINT_ACTION_CTRL::CircleInPointProperties(*from.circleinpointprop_);
  } else {
    circleinpointprop_ = nullptr;
  }
  if (from.has_courseinpointprop()) {
    courseinpointprop_ = new ::WAYPOINT_ACTION_CTRL::CourseInPointProperties(*from.courseinpointprop_);
  } else {
    courseinpointprop_ = nullptr;
  }
  if (from.has_servoprop()) {
    servoprop_ = new ::WAYPOINT_ACTION_CTRL::ServoProperties(*from.servoprop_);
  } else {
    servoprop_ = nullptr;
  }
  if (from.has_pointincoordprop()) {
    pointincoordprop_ = new ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties(*from.pointincoordprop_);
  } else {
    pointincoordprop_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionscount_) -
    reinterpret_cast<char*>(&type_)) + sizeof(actionscount_));
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.ActionInPoint)
}

void ActionInPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionInPoint_WaypointActionCtrl_2eproto.base);
  ::memset(&circleinpointprop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionpriority_) -
      reinterpret_cast<char*>(&circleinpointprop_)) + sizeof(actionpriority_));
  actionscount_ = 1u;
}

ActionInPoint::~ActionInPoint() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.ActionInPoint)
  SharedDtor();
}

void ActionInPoint::SharedDtor() {
  if (this != internal_default_instance()) delete circleinpointprop_;
  if (this != internal_default_instance()) delete courseinpointprop_;
  if (this != internal_default_instance()) delete servoprop_;
  if (this != internal_default_instance()) delete pointincoordprop_;
}

void ActionInPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionInPoint& ActionInPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionInPoint_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void ActionInPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(circleinpointprop_ != nullptr);
      circleinpointprop_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(courseinpointprop_ != nullptr);
      courseinpointprop_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(servoprop_ != nullptr);
      servoprop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pointincoordprop_ != nullptr);
      pointincoordprop_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subjid_) -
        reinterpret_cast<char*>(&type_)) + sizeof(subjid_));
  }
  if (cached_has_bits & 0x00000300u) {
    actionpriority_ = 0;
    actionscount_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionInPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .WAYPOINT_ACTION_CTRL.ActionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::WAYPOINT_ACTION_CTRL::ActionType_IsValid(val))) {
            set_type(static_cast<::WAYPOINT_ACTION_CTRL::ActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 actionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_actionid(&has_bits);
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 actionTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_actiontime(&has_bits);
          actiontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 actionsCount = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_actionscount(&has_bits);
          actionscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subjID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_subjid(&has_bits);
          subjid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .WAYPOINT_ACTION_CTRL.Priority actionPriority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::WAYPOINT_ACTION_CTRL::Priority_IsValid(val))) {
            set_actionpriority(static_cast<::WAYPOINT_ACTION_CTRL::Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .WAYPOINT_ACTION_CTRL.CircleInPointProperties circleinPointProp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_circleinpointprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .WAYPOINT_ACTION_CTRL.CourseInPointProperties courseinPointProp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_courseinpointprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .WAYPOINT_ACTION_CTRL.ServoProperties servoProp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_servoprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .WAYPOINT_ACTION_CTRL.PointInCoordinateProperties pointInCoordProp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_pointincoordprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionInPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .WAYPOINT_ACTION_CTRL.ActionType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WAYPOINT_ACTION_CTRL::ActionType_IsValid(value)) {
            set_type(static_cast< ::WAYPOINT_ACTION_CTRL::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 actionID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_actionid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 actionTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_actiontime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actiontime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 actionsCount = 4 [default = 1];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_actionscount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actionscount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 subjID = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_subjid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WAYPOINT_ACTION_CTRL.Priority actionPriority = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WAYPOINT_ACTION_CTRL::Priority_IsValid(value)) {
            set_actionpriority(static_cast< ::WAYPOINT_ACTION_CTRL::Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WAYPOINT_ACTION_CTRL.CircleInPointProperties circleinPointProp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_circleinpointprop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WAYPOINT_ACTION_CTRL.CourseInPointProperties courseinPointProp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_courseinpointprop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WAYPOINT_ACTION_CTRL.ServoProperties servoProp = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_servoprop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WAYPOINT_ACTION_CTRL.PointInCoordinateProperties pointInCoordProp = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pointincoordprop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.ActionInPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.ActionInPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionInPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .WAYPOINT_ACTION_CTRL.ActionType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 actionID = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->actionid(), output);
  }

  // optional uint32 actionTime = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->actiontime(), output);
  }

  // optional uint32 actionsCount = 4 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->actionscount(), output);
  }

  // optional uint32 subjID = 5;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->subjid(), output);
  }

  // optional .WAYPOINT_ACTION_CTRL.Priority actionPriority = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->actionpriority(), output);
  }

  // optional .WAYPOINT_ACTION_CTRL.CircleInPointProperties circleinPointProp = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::circleinpointprop(this), output);
  }

  // optional .WAYPOINT_ACTION_CTRL.CourseInPointProperties courseinPointProp = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::courseinpointprop(this), output);
  }

  // optional .WAYPOINT_ACTION_CTRL.ServoProperties servoProp = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::servoprop(this), output);
  }

  // optional .WAYPOINT_ACTION_CTRL.PointInCoordinateProperties pointInCoordProp = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::pointincoordprop(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.ActionInPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionInPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .WAYPOINT_ACTION_CTRL.ActionType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 actionID = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->actionid(), target);
  }

  // optional uint32 actionTime = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->actiontime(), target);
  }

  // optional uint32 actionsCount = 4 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->actionscount(), target);
  }

  // optional uint32 subjID = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->subjid(), target);
  }

  // optional .WAYPOINT_ACTION_CTRL.Priority actionPriority = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->actionpriority(), target);
  }

  // optional .WAYPOINT_ACTION_CTRL.CircleInPointProperties circleinPointProp = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::circleinpointprop(this), target);
  }

  // optional .WAYPOINT_ACTION_CTRL.CourseInPointProperties courseinPointProp = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::courseinpointprop(this), target);
  }

  // optional .WAYPOINT_ACTION_CTRL.ServoProperties servoProp = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::servoprop(this), target);
  }

  // optional .WAYPOINT_ACTION_CTRL.PointInCoordinateProperties pointInCoordProp = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::pointincoordprop(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.ActionInPoint)
  return target;
}

size_t ActionInPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .WAYPOINT_ACTION_CTRL.ActionType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .WAYPOINT_ACTION_CTRL.CircleInPointProperties circleinPointProp = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *circleinpointprop_);
    }

    // optional .WAYPOINT_ACTION_CTRL.CourseInPointProperties courseinPointProp = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *courseinpointprop_);
    }

    // optional .WAYPOINT_ACTION_CTRL.ServoProperties servoProp = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *servoprop_);
    }

    // optional .WAYPOINT_ACTION_CTRL.PointInCoordinateProperties pointInCoordProp = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pointincoordprop_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional uint32 actionID = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->actionid());
    }

    // optional uint32 actionTime = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->actiontime());
    }

    // optional uint32 subjID = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->subjid());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .WAYPOINT_ACTION_CTRL.Priority actionPriority = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->actionpriority());
    }

    // optional uint32 actionsCount = 4 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->actionscount());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionInPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionInPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionInPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.ActionInPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.ActionInPoint)
    MergeFrom(*source);
  }
}

void ActionInPoint::MergeFrom(const ActionInPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_circleinpointprop()->::WAYPOINT_ACTION_CTRL::CircleInPointProperties::MergeFrom(from.circleinpointprop());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_courseinpointprop()->::WAYPOINT_ACTION_CTRL::CourseInPointProperties::MergeFrom(from.courseinpointprop());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_servoprop()->::WAYPOINT_ACTION_CTRL::ServoProperties::MergeFrom(from.servoprop());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pointincoordprop()->::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties::MergeFrom(from.pointincoordprop());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      actionid_ = from.actionid_;
    }
    if (cached_has_bits & 0x00000040u) {
      actiontime_ = from.actiontime_;
    }
    if (cached_has_bits & 0x00000080u) {
      subjid_ = from.subjid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      actionpriority_ = from.actionpriority_;
    }
    if (cached_has_bits & 0x00000200u) {
      actionscount_ = from.actionscount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionInPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionInPoint::CopyFrom(const ActionInPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.ActionInPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionInPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void ActionInPoint::Swap(ActionInPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionInPoint::InternalSwap(ActionInPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(circleinpointprop_, other->circleinpointprop_);
  swap(courseinpointprop_, other->courseinpointprop_);
  swap(servoprop_, other->servoprop_);
  swap(pointincoordprop_, other->pointincoordprop_);
  swap(type_, other->type_);
  swap(actionid_, other->actionid_);
  swap(actiontime_, other->actiontime_);
  swap(subjid_, other->subjid_);
  swap(actionpriority_, other->actionpriority_);
  swap(actionscount_, other->actionscount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionInPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CircleInPointProperties::InitAsDefaultInstance() {
}
class CircleInPointProperties::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CircleInPointProperties>()._has_bits_);
  static void set_has_radiusmeters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_azimuthdegrees(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircleInPointProperties::kRadiusMetersFieldNumber;
const int CircleInPointProperties::kAzimuthDegreesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircleInPointProperties::CircleInPointProperties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
}
CircleInPointProperties::CircleInPointProperties(const CircleInPointProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radiusmeters_, &from.radiusmeters_,
    static_cast<size_t>(reinterpret_cast<char*>(&azimuthdegrees_) -
    reinterpret_cast<char*>(&radiusmeters_)) + sizeof(azimuthdegrees_));
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
}

void CircleInPointProperties::SharedCtor() {
  ::memset(&radiusmeters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuthdegrees_) -
      reinterpret_cast<char*>(&radiusmeters_)) + sizeof(azimuthdegrees_));
}

CircleInPointProperties::~CircleInPointProperties() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  SharedDtor();
}

void CircleInPointProperties::SharedDtor() {
}

void CircleInPointProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CircleInPointProperties& CircleInPointProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CircleInPointProperties_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void CircleInPointProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&radiusmeters_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&azimuthdegrees_) -
        reinterpret_cast<char*>(&radiusmeters_)) + sizeof(azimuthdegrees_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CircleInPointProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float radiusMeters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_radiusmeters(&has_bits);
          radiusmeters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float azimuthDegrees = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_azimuthdegrees(&has_bits);
          azimuthdegrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CircleInPointProperties::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float radiusMeters = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_radiusmeters(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiusmeters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float azimuthDegrees = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_azimuthdegrees(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuthdegrees_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CircleInPointProperties::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float radiusMeters = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->radiusmeters(), output);
  }

  // optional float azimuthDegrees = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->azimuthdegrees(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
}

::PROTOBUF_NAMESPACE_ID::uint8* CircleInPointProperties::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float radiusMeters = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->radiusmeters(), target);
  }

  // optional float azimuthDegrees = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->azimuthdegrees(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  return target;
}

size_t CircleInPointProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float radiusMeters = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float azimuthDegrees = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CircleInPointProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const CircleInPointProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CircleInPointProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
    MergeFrom(*source);
  }
}

void CircleInPointProperties::MergeFrom(const CircleInPointProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      radiusmeters_ = from.radiusmeters_;
    }
    if (cached_has_bits & 0x00000002u) {
      azimuthdegrees_ = from.azimuthdegrees_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CircleInPointProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleInPointProperties::CopyFrom(const CircleInPointProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.CircleInPointProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleInPointProperties::IsInitialized() const {
  return true;
}

void CircleInPointProperties::Swap(CircleInPointProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircleInPointProperties::InternalSwap(CircleInPointProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(radiusmeters_, other->radiusmeters_);
  swap(azimuthdegrees_, other->azimuthdegrees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CircleInPointProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CourseInPointProperties::InitAsDefaultInstance() {
}
class CourseInPointProperties::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CourseInPointProperties>()._has_bits_);
  static void set_has_azimuthdegrees(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CourseInPointProperties::kAzimuthDegreesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CourseInPointProperties::CourseInPointProperties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
}
CourseInPointProperties::CourseInPointProperties(const CourseInPointProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  azimuthdegrees_ = from.azimuthdegrees_;
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
}

void CourseInPointProperties::SharedCtor() {
  azimuthdegrees_ = 0;
}

CourseInPointProperties::~CourseInPointProperties() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  SharedDtor();
}

void CourseInPointProperties::SharedDtor() {
}

void CourseInPointProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CourseInPointProperties& CourseInPointProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CourseInPointProperties_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void CourseInPointProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  azimuthdegrees_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CourseInPointProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float azimuthDegrees = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_azimuthdegrees(&has_bits);
          azimuthdegrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CourseInPointProperties::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float azimuthDegrees = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_azimuthdegrees(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuthdegrees_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CourseInPointProperties::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float azimuthDegrees = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->azimuthdegrees(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
}

::PROTOBUF_NAMESPACE_ID::uint8* CourseInPointProperties::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float azimuthDegrees = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->azimuthdegrees(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  return target;
}

size_t CourseInPointProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float azimuthDegrees = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CourseInPointProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const CourseInPointProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CourseInPointProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
    MergeFrom(*source);
  }
}

void CourseInPointProperties::MergeFrom(const CourseInPointProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_azimuthdegrees()) {
    set_azimuthdegrees(from.azimuthdegrees());
  }
}

void CourseInPointProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CourseInPointProperties::CopyFrom(const CourseInPointProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.CourseInPointProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CourseInPointProperties::IsInitialized() const {
  return true;
}

void CourseInPointProperties::Swap(CourseInPointProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CourseInPointProperties::InternalSwap(CourseInPointProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(azimuthdegrees_, other->azimuthdegrees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CourseInPointProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServoProperties::InitAsDefaultInstance() {
}
class ServoProperties::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ServoProperties>()._has_bits_);
  static void set_has_targetangle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoProperties::kTargetAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoProperties::ServoProperties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.ServoProperties)
}
ServoProperties::ServoProperties(const ServoProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetangle_ = from.targetangle_;
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.ServoProperties)
}

void ServoProperties::SharedCtor() {
  targetangle_ = 0;
}

ServoProperties::~ServoProperties() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.ServoProperties)
  SharedDtor();
}

void ServoProperties::SharedDtor() {
}

void ServoProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServoProperties& ServoProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServoProperties_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void ServoProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetangle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServoProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float targetAngle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_targetangle(&has_bits);
          targetangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServoProperties::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float targetAngle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_targetangle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.ServoProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.ServoProperties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServoProperties::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float targetAngle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->targetangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.ServoProperties)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServoProperties::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float targetAngle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->targetangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.ServoProperties)
  return target;
}

size_t ServoProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float targetAngle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServoProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.ServoProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.ServoProperties)
    MergeFrom(*source);
  }
}

void ServoProperties::MergeFrom(const ServoProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_targetangle()) {
    set_targetangle(from.targetangle());
  }
}

void ServoProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoProperties::CopyFrom(const ServoProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.ServoProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoProperties::IsInitialized() const {
  return true;
}

void ServoProperties::Swap(ServoProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoProperties::InternalSwap(ServoProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(targetangle_, other->targetangle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServoProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointInCoordinateProperties::InitAsDefaultInstance() {
}
class PointInCoordinateProperties::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<PointInCoordinateProperties>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointInCoordinateProperties::kLatitudeFieldNumber;
const int PointInCoordinateProperties::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointInCoordinateProperties::PointInCoordinateProperties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
}
PointInCoordinateProperties::PointInCoordinateProperties(const PointInCoordinateProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
}

void PointInCoordinateProperties::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

PointInCoordinateProperties::~PointInCoordinateProperties() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  SharedDtor();
}

void PointInCoordinateProperties::SharedDtor() {
}

void PointInCoordinateProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointInCoordinateProperties& PointInCoordinateProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointInCoordinateProperties_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void PointInCoordinateProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PointInCoordinateProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          HasBitSetters::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          HasBitSetters::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PointInCoordinateProperties::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_latitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_longitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PointInCoordinateProperties::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
}

::PROTOBUF_NAMESPACE_ID::uint8* PointInCoordinateProperties::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  return target;
}

size_t PointInCoordinateProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointInCoordinateProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const PointInCoordinateProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointInCoordinateProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
    MergeFrom(*source);
  }
}

void PointInCoordinateProperties::MergeFrom(const PointInCoordinateProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointInCoordinateProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointInCoordinateProperties::CopyFrom(const PointInCoordinateProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.PointInCoordinateProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointInCoordinateProperties::IsInitialized() const {
  return true;
}

void PointInCoordinateProperties::Swap(PointInCoordinateProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointInCoordinateProperties::InternalSwap(PointInCoordinateProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointInCoordinateProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveToPointRequestResult::InitAsDefaultInstance() {
}
class MoveToPointRequestResult::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<MoveToPointRequestResult>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveToPointRequestResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveToPointRequestResult::MoveToPointRequestResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
}
MoveToPointRequestResult::MoveToPointRequestResult(const MoveToPointRequestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
}

void MoveToPointRequestResult::SharedCtor() {
  result_ = 0;
}

MoveToPointRequestResult::~MoveToPointRequestResult() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  SharedDtor();
}

void MoveToPointRequestResult::SharedDtor() {
}

void MoveToPointRequestResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveToPointRequestResult& MoveToPointRequestResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveToPointRequestResult_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void MoveToPointRequestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveToPointRequestResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.Result result = 1 [default = Result_Undefined];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result_IsValid(val))) {
            set_result(static_cast<::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveToPointRequestResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.Result result = 1 [default = Result_Undefined];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result_IsValid(value)) {
            set_result(static_cast< ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveToPointRequestResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.Result result = 1 [default = Result_Undefined];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveToPointRequestResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.Result result = 1 [default = Result_Undefined];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  return target;
}

size_t MoveToPointRequestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult.Result result = 1 [default = Result_Undefined];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveToPointRequestResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveToPointRequestResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveToPointRequestResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
    MergeFrom(*source);
  }
}

void MoveToPointRequestResult::MergeFrom(const MoveToPointRequestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void MoveToPointRequestResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveToPointRequestResult::CopyFrom(const MoveToPointRequestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.MoveToPointRequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveToPointRequestResult::IsInitialized() const {
  return true;
}

void MoveToPointRequestResult::Swap(MoveToPointRequestResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveToPointRequestResult::InternalSwap(MoveToPointRequestResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveToPointRequestResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionInPointResult::InitAsDefaultInstance() {
}
class ActionInPointResult::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ActionInPointResult>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_actionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionInPointResult::kResultFieldNumber;
const int ActionInPointResult::kActionIDFieldNumber;
const int ActionInPointResult::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionInPointResult::ActionInPointResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.ActionInPointResult)
}
ActionInPointResult::ActionInPointResult(const ActionInPointResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.ActionInPointResult)
}

void ActionInPointResult::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

ActionInPointResult::~ActionInPointResult() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  SharedDtor();
}

void ActionInPointResult::SharedDtor() {
}

void ActionInPointResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionInPointResult& ActionInPointResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionInPointResult_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void ActionInPointResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&result_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionInPointResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult.Result result = 1 [default = ActionFinished];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result_IsValid(val))) {
            set_result(static_cast<::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 actionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_actionid(&has_bits);
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionInPointResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult.Result result = 1 [default = ActionFinished];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result_IsValid(value)) {
            set_result(static_cast< ::WAYPOINT_ACTION_CTRL::ActionInPointResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 actionID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_actionid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_success(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionInPointResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult.Result result = 1 [default = ActionFinished];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 actionID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->actionid(), output);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.ActionInPointResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionInPointResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult.Result result = 1 [default = ActionFinished];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 actionID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->actionid(), target);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  return target;
}

size_t ActionInPointResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult.Result result = 1 [default = ActionFinished];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 actionID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->actionid());
    }

    // optional bool success = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionInPointResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionInPointResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionInPointResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.ActionInPointResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.ActionInPointResult)
    MergeFrom(*source);
  }
}

void ActionInPointResult::MergeFrom(const ActionInPointResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      actionid_ = from.actionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionInPointResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionInPointResult::CopyFrom(const ActionInPointResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.ActionInPointResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionInPointResult::IsInitialized() const {
  return true;
}

void ActionInPointResult::Swap(ActionInPointResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionInPointResult::InternalSwap(ActionInPointResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(actionid_, other->actionid_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionInPointResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ctrl::InitAsDefaultInstance() {
  ::WAYPOINT_ACTION_CTRL::_Ctrl_default_instance_._instance.get_mutable()->request_ = const_cast< ::WAYPOINT_ACTION_CTRL::MoveToPointRequest*>(
      ::WAYPOINT_ACTION_CTRL::MoveToPointRequest::internal_default_instance());
  ::WAYPOINT_ACTION_CTRL::_Ctrl_default_instance_._instance.get_mutable()->requestresult_ = const_cast< ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult*>(
      ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult::internal_default_instance());
  ::WAYPOINT_ACTION_CTRL::_Ctrl_default_instance_._instance.get_mutable()->actionresult_ = const_cast< ::WAYPOINT_ACTION_CTRL::ActionInPointResult*>(
      ::WAYPOINT_ACTION_CTRL::ActionInPointResult::internal_default_instance());
}
class Ctrl::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Ctrl>()._has_bits_);
  static void set_has_boardid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::WAYPOINT_ACTION_CTRL::MoveToPointRequest& request(const Ctrl* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult& requestresult(const Ctrl* msg);
  static void set_has_requestresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::WAYPOINT_ACTION_CTRL::ActionInPointResult& actionresult(const Ctrl* msg);
  static void set_has_actionresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::WAYPOINT_ACTION_CTRL::MoveToPointRequest&
Ctrl::HasBitSetters::request(const Ctrl* msg) {
  return *msg->request_;
}
const ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult&
Ctrl::HasBitSetters::requestresult(const Ctrl* msg) {
  return *msg->requestresult_;
}
const ::WAYPOINT_ACTION_CTRL::ActionInPointResult&
Ctrl::HasBitSetters::actionresult(const Ctrl* msg) {
  return *msg->actionresult_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ctrl::kBoardIdFieldNumber;
const int Ctrl::kRequestFieldNumber;
const int Ctrl::kRequestResultFieldNumber;
const int Ctrl::kActionResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ctrl::Ctrl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WAYPOINT_ACTION_CTRL.Ctrl)
}
Ctrl::Ctrl(const Ctrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request()) {
    request_ = new ::WAYPOINT_ACTION_CTRL::MoveToPointRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from.has_requestresult()) {
    requestresult_ = new ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult(*from.requestresult_);
  } else {
    requestresult_ = nullptr;
  }
  if (from.has_actionresult()) {
    actionresult_ = new ::WAYPOINT_ACTION_CTRL::ActionInPointResult(*from.actionresult_);
  } else {
    actionresult_ = nullptr;
  }
  boardid_ = from.boardid_;
  // @@protoc_insertion_point(copy_constructor:WAYPOINT_ACTION_CTRL.Ctrl)
}

void Ctrl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ctrl_WaypointActionCtrl_2eproto.base);
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boardid_) -
      reinterpret_cast<char*>(&request_)) + sizeof(boardid_));
}

Ctrl::~Ctrl() {
  // @@protoc_insertion_point(destructor:WAYPOINT_ACTION_CTRL.Ctrl)
  SharedDtor();
}

void Ctrl::SharedDtor() {
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete requestresult_;
  if (this != internal_default_instance()) delete actionresult_;
}

void Ctrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ctrl& Ctrl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ctrl_WaypointActionCtrl_2eproto.base);
  return *internal_default_instance();
}


void Ctrl::Clear() {
// @@protoc_insertion_point(message_clear_start:WAYPOINT_ACTION_CTRL.Ctrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(requestresult_ != nullptr);
      requestresult_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(actionresult_ != nullptr);
      actionresult_->Clear();
    }
  }
  boardid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Ctrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 boardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_boardid(&has_bits);
          boardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequest request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult requestResult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_requestresult(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult actionResult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_actionresult(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Ctrl::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WAYPOINT_ACTION_CTRL.Ctrl)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boardId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_boardid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequest request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult requestResult = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_requestresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult actionResult = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_actionresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WAYPOINT_ACTION_CTRL.Ctrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WAYPOINT_ACTION_CTRL.Ctrl)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Ctrl::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WAYPOINT_ACTION_CTRL.Ctrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 boardId = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->boardid(), output);
  }

  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequest request = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::request(this), output);
  }

  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult requestResult = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::requestresult(this), output);
  }

  // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult actionResult = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::actionresult(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WAYPOINT_ACTION_CTRL.Ctrl)
}

::PROTOBUF_NAMESPACE_ID::uint8* Ctrl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WAYPOINT_ACTION_CTRL.Ctrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 boardId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->boardid(), target);
  }

  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequest request = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::request(this), target);
  }

  // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult requestResult = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::requestresult(this), target);
  }

  // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult actionResult = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::actionresult(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WAYPOINT_ACTION_CTRL.Ctrl)
  return target;
}

size_t Ctrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WAYPOINT_ACTION_CTRL.Ctrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 boardId = 1;
  if (has_boardid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->boardid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequest request = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_);
    }

    // optional .WAYPOINT_ACTION_CTRL.MoveToPointRequestResult requestResult = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requestresult_);
    }

    // optional .WAYPOINT_ACTION_CTRL.ActionInPointResult actionResult = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *actionresult_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ctrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WAYPOINT_ACTION_CTRL.Ctrl)
  GOOGLE_DCHECK_NE(&from, this);
  const Ctrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ctrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WAYPOINT_ACTION_CTRL.Ctrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WAYPOINT_ACTION_CTRL.Ctrl)
    MergeFrom(*source);
  }
}

void Ctrl::MergeFrom(const Ctrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WAYPOINT_ACTION_CTRL.Ctrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_request()->::WAYPOINT_ACTION_CTRL::MoveToPointRequest::MergeFrom(from.request());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_requestresult()->::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult::MergeFrom(from.requestresult());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_actionresult()->::WAYPOINT_ACTION_CTRL::ActionInPointResult::MergeFrom(from.actionresult());
    }
    if (cached_has_bits & 0x00000008u) {
      boardid_ = from.boardid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ctrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WAYPOINT_ACTION_CTRL.Ctrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ctrl::CopyFrom(const Ctrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WAYPOINT_ACTION_CTRL.Ctrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ctrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_request()) {
    if (!this->request_->IsInitialized()) return false;
  }
  return true;
}

void Ctrl::Swap(Ctrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ctrl::InternalSwap(Ctrl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(request_, other->request_);
  swap(requestresult_, other->requestresult_);
  swap(actionresult_, other->actionresult_);
  swap(boardid_, other->boardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ctrl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace WAYPOINT_ACTION_CTRL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::MoveToPointRequest* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::MoveToPointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::MoveToPointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::ActionInPoint* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::ActionInPoint >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::ActionInPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::CircleInPointProperties* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::CircleInPointProperties >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::CircleInPointProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::CourseInPointProperties* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::CourseInPointProperties >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::CourseInPointProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::ServoProperties* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::ServoProperties >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::ServoProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::PointInCoordinateProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::MoveToPointRequestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::ActionInPointResult* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::ActionInPointResult >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::ActionInPointResult >(arena);
}
template<> PROTOBUF_NOINLINE ::WAYPOINT_ACTION_CTRL::Ctrl* Arena::CreateMaybeMessage< ::WAYPOINT_ACTION_CTRL::Ctrl >(Arena* arena) {
  return Arena::CreateInternal< ::WAYPOINT_ACTION_CTRL::Ctrl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
