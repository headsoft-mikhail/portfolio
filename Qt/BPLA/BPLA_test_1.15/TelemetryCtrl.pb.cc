// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TelemetryCtrl.proto

#include "TelemetryCtrl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TelemetryCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AirTelemetry_TelemetryCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TelemetryCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MRTelemetry_TelemetryCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TelemetryCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Navigation_TelemetryCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TelemetryCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation_TelemetryCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TelemetryCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriberList_TelemetryCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TelemetryCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Telemetry_TelemetryCtrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TelemetryCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TelemetryList_TelemetryCtrl_2eproto;
namespace TELEMETRY_CTRL {
class NavigationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Navigation> _instance;
} _Navigation_default_instance_;
class OrientationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Orientation> _instance;
} _Orientation_default_instance_;
class AirTelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AirTelemetry> _instance;
} _AirTelemetry_default_instance_;
class MRTelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MRTelemetry> _instance;
} _MRTelemetry_default_instance_;
class TelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Telemetry> _instance;
} _Telemetry_default_instance_;
class TelemetryListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryList> _instance;
} _TelemetryList_default_instance_;
class SubscriberListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberList> _instance;
} _SubscriberList_default_instance_;
class CtrlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ctrl> _instance;
  const ::TELEMETRY_CTRL::TelemetryList* telemetrylist_;
  const ::TELEMETRY_CTRL::SubscriberList* subscriberlist_;
} _Ctrl_default_instance_;
}  // namespace TELEMETRY_CTRL
static void InitDefaultsscc_info_AirTelemetry_TelemetryCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TELEMETRY_CTRL::_AirTelemetry_default_instance_;
    new (ptr) ::TELEMETRY_CTRL::AirTelemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TELEMETRY_CTRL::AirTelemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AirTelemetry_TelemetryCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AirTelemetry_TelemetryCtrl_2eproto}, {}};

static void InitDefaultsscc_info_Ctrl_TelemetryCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TELEMETRY_CTRL::_Ctrl_default_instance_;
    new (ptr) ::TELEMETRY_CTRL::Ctrl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TELEMETRY_CTRL::Ctrl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ctrl_TelemetryCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Ctrl_TelemetryCtrl_2eproto}, {
      &scc_info_TelemetryList_TelemetryCtrl_2eproto.base,
      &scc_info_SubscriberList_TelemetryCtrl_2eproto.base,}};

static void InitDefaultsscc_info_MRTelemetry_TelemetryCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TELEMETRY_CTRL::_MRTelemetry_default_instance_;
    new (ptr) ::TELEMETRY_CTRL::MRTelemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TELEMETRY_CTRL::MRTelemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MRTelemetry_TelemetryCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MRTelemetry_TelemetryCtrl_2eproto}, {}};

static void InitDefaultsscc_info_Navigation_TelemetryCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TELEMETRY_CTRL::_Navigation_default_instance_;
    new (ptr) ::TELEMETRY_CTRL::Navigation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TELEMETRY_CTRL::Navigation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Navigation_TelemetryCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Navigation_TelemetryCtrl_2eproto}, {}};

static void InitDefaultsscc_info_Orientation_TelemetryCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TELEMETRY_CTRL::_Orientation_default_instance_;
    new (ptr) ::TELEMETRY_CTRL::Orientation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TELEMETRY_CTRL::Orientation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation_TelemetryCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Orientation_TelemetryCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SubscriberList_TelemetryCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TELEMETRY_CTRL::_SubscriberList_default_instance_;
    new (ptr) ::TELEMETRY_CTRL::SubscriberList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TELEMETRY_CTRL::SubscriberList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriberList_TelemetryCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscriberList_TelemetryCtrl_2eproto}, {}};

static void InitDefaultsscc_info_Telemetry_TelemetryCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TELEMETRY_CTRL::_Telemetry_default_instance_;
    new (ptr) ::TELEMETRY_CTRL::Telemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TELEMETRY_CTRL::Telemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Telemetry_TelemetryCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Telemetry_TelemetryCtrl_2eproto}, {
      &scc_info_Navigation_TelemetryCtrl_2eproto.base,
      &scc_info_Orientation_TelemetryCtrl_2eproto.base,
      &scc_info_AirTelemetry_TelemetryCtrl_2eproto.base,
      &scc_info_MRTelemetry_TelemetryCtrl_2eproto.base,}};

static void InitDefaultsscc_info_TelemetryList_TelemetryCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TELEMETRY_CTRL::_TelemetryList_default_instance_;
    new (ptr) ::TELEMETRY_CTRL::TelemetryList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TELEMETRY_CTRL::TelemetryList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TelemetryList_TelemetryCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TelemetryList_TelemetryCtrl_2eproto}, {
      &scc_info_Telemetry_TelemetryCtrl_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TelemetryCtrl_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TelemetryCtrl_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TelemetryCtrl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TelemetryCtrl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Navigation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Navigation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Navigation, latitude_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Navigation, longitude_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Navigation, altitude_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Orientation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Orientation, roll_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Orientation, pitch_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Orientation, yaw_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::AirTelemetry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::AirTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::AirTelemetry, altbaro_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::AirTelemetry, airspeed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::MRTelemetry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::MRTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::MRTelemetry, batteryvoltage_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::MRTelemetry, autopilotmode_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::MRTelemetry, batterychargepercent_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, boardid_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, unix_time_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, gpsnavigation_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, orientation_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, gps_course_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, gps_speed_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, airtelemetry_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, mrtelemetry_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, fixtype_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, satellitescount_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, mag_course_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Telemetry, servo_angle_),
  4,
  5,
  0,
  1,
  6,
  7,
  2,
  3,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::TelemetryList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::TelemetryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::TelemetryList, list_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::SubscriberList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::SubscriberList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::SubscriberList, boardid_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::SubscriberList, issubscribetoall_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Ctrl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Ctrl, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Ctrl, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Ctrl, msgtype_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Ctrl, error_),
  offsetof(::TELEMETRY_CTRL::CtrlDefaultTypeInternal, telemetrylist_),
  offsetof(::TELEMETRY_CTRL::CtrlDefaultTypeInternal, subscriberlist_),
  PROTOBUF_FIELD_OFFSET(::TELEMETRY_CTRL::Ctrl, CommandData_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::TELEMETRY_CTRL::Navigation)},
  { 11, 19, sizeof(::TELEMETRY_CTRL::Orientation)},
  { 22, 29, sizeof(::TELEMETRY_CTRL::AirTelemetry)},
  { 31, 39, sizeof(::TELEMETRY_CTRL::MRTelemetry)},
  { 42, 59, sizeof(::TELEMETRY_CTRL::Telemetry)},
  { 71, 77, sizeof(::TELEMETRY_CTRL::TelemetryList)},
  { 78, 85, sizeof(::TELEMETRY_CTRL::SubscriberList)},
  { 87, 97, sizeof(::TELEMETRY_CTRL::Ctrl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TELEMETRY_CTRL::_Navigation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TELEMETRY_CTRL::_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TELEMETRY_CTRL::_AirTelemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TELEMETRY_CTRL::_MRTelemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TELEMETRY_CTRL::_Telemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TELEMETRY_CTRL::_TelemetryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TELEMETRY_CTRL::_SubscriberList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TELEMETRY_CTRL::_Ctrl_default_instance_),
};

const char descriptor_table_protodef_TelemetryCtrl_2eproto[] =
  "\n\023TelemetryCtrl.proto\022\016TELEMETRY_CTRL\"C\n"
  "\nNavigation\022\020\n\010latitude\030\001 \002(\001\022\021\n\tlongitu"
  "de\030\002 \002(\001\022\020\n\010altitude\030\003 \002(\002\"7\n\013Orientatio"
  "n\022\014\n\004roll\030\001 \002(\002\022\r\n\005pitch\030\002 \002(\002\022\013\n\003yaw\030\003 "
  "\002(\002\"1\n\014AirTelemetry\022\017\n\007altBaro\030\001 \001(\002\022\020\n\010"
  "airSpeed\030\002 \001(\002\"y\n\013MRTelemetry\022\026\n\016battery"
  "Voltage\030\001 \001(\002\0224\n\rautopilotMode\030\002 \001(\0162\035.T"
  "ELEMETRY_CTRL.AutopilotMode\022\034\n\024batteryCh"
  "argePercent\030\003 \001(\r\"\215\003\n\tTelemetry\022\017\n\007board"
  "Id\030\001 \002(\r\022\021\n\tunix_time\030\002 \001(\r\0221\n\rgpsNaviga"
  "tion\030\003 \001(\0132\032.TELEMETRY_CTRL.Navigation\0220"
  "\n\013orientation\030\004 \001(\0132\033.TELEMETRY_CTRL.Ori"
  "entation\022\022\n\ngps_course\030\005 \001(\002\022\021\n\tgps_spee"
  "d\030\006 \001(\002\0222\n\014AirTelemetry\030\007 \001(\0132\034.TELEMETR"
  "Y_CTRL.AirTelemetry\0220\n\013mrTelemetry\030\010 \001(\013"
  "2\033.TELEMETRY_CTRL.MRTelemetry\022(\n\007fixType"
  "\030\t \001(\0162\027.TELEMETRY_CTRL.FixType\022\027\n\017satel"
  "litesCount\030\n \001(\r\022\022\n\nmag_course\030\013 \001(\002\022\023\n\013"
  "servo_angle\030\014 \001(\r\"8\n\rTelemetryList\022\'\n\004li"
  "st\030\001 \003(\0132\031.TELEMETRY_CTRL.Telemetry\"B\n\016S"
  "ubscriberList\022\017\n\007boardId\030\001 \003(\r\022\037\n\020isSubs"
  "cribeToAll\030\002 \001(\010:\005false\"\363\001\n\004Ctrl\0225\n\007msgT"
  "ype\030\001 \002(\0162$.TELEMETRY_CTRL.TelemetryCtrl"
  "MsgType\0223\n\005error\030\002 \001(\0162\025.TELEMETRY_CTRL."
  "Error:\rError_NoError\0226\n\rtelemetryList\030\003 "
  "\001(\0132\035.TELEMETRY_CTRL.TelemetryListH\000\0228\n\016"
  "subscriberList\030\004 \001(\0132\036.TELEMETRY_CTRL.Su"
  "bscriberListH\000B\r\n\013CommandData*i\n\024Telemet"
  "ryCtrlMsgType\022\031\n\025CtrlMsgType_Telemetry\020\000"
  "\022\031\n\025CtrlMsgType_Subscribe\020\001\022\033\n\027CtrlMsgTy"
  "pe_Unsubscribe\020\002*-\n\005Error\022\021\n\rError_NoErr"
  "or\020\000\022\021\n\rError_General\020\001*Y\n\rAutopilotMode"
  "\022\025\n\021AutopilotMode_GPS\020\000\022\032\n\026AutopilotMode"
  "_FailSafe\020\001\022\025\n\021AutopilotMode_ATT\020\002*)\n\007Fi"
  "xType\022\016\n\nFixType_2D\020\000\022\016\n\nFixType_3D\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TelemetryCtrl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TelemetryCtrl_2eproto_sccs[8] = {
  &scc_info_AirTelemetry_TelemetryCtrl_2eproto.base,
  &scc_info_Ctrl_TelemetryCtrl_2eproto.base,
  &scc_info_MRTelemetry_TelemetryCtrl_2eproto.base,
  &scc_info_Navigation_TelemetryCtrl_2eproto.base,
  &scc_info_Orientation_TelemetryCtrl_2eproto.base,
  &scc_info_SubscriberList_TelemetryCtrl_2eproto.base,
  &scc_info_Telemetry_TelemetryCtrl_2eproto.base,
  &scc_info_TelemetryList_TelemetryCtrl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TelemetryCtrl_2eproto_once;
static bool descriptor_table_TelemetryCtrl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TelemetryCtrl_2eproto = {
  &descriptor_table_TelemetryCtrl_2eproto_initialized, descriptor_table_protodef_TelemetryCtrl_2eproto, "TelemetryCtrl.proto", 1397,
  &descriptor_table_TelemetryCtrl_2eproto_once, descriptor_table_TelemetryCtrl_2eproto_sccs, descriptor_table_TelemetryCtrl_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_TelemetryCtrl_2eproto::offsets,
  file_level_metadata_TelemetryCtrl_2eproto, 8, file_level_enum_descriptors_TelemetryCtrl_2eproto, file_level_service_descriptors_TelemetryCtrl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TelemetryCtrl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TelemetryCtrl_2eproto), true);
namespace TELEMETRY_CTRL {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryCtrlMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TelemetryCtrl_2eproto);
  return file_level_enum_descriptors_TelemetryCtrl_2eproto[0];
}
bool TelemetryCtrlMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TelemetryCtrl_2eproto);
  return file_level_enum_descriptors_TelemetryCtrl_2eproto[1];
}
bool Error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutopilotMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TelemetryCtrl_2eproto);
  return file_level_enum_descriptors_TelemetryCtrl_2eproto[2];
}
bool AutopilotMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TelemetryCtrl_2eproto);
  return file_level_enum_descriptors_TelemetryCtrl_2eproto[3];
}
bool FixType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Navigation::InitAsDefaultInstance() {
}
class Navigation::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Navigation>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Navigation::kLatitudeFieldNumber;
const int Navigation::kLongitudeFieldNumber;
const int Navigation::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Navigation::Navigation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TELEMETRY_CTRL.Navigation)
}
Navigation::Navigation(const Navigation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:TELEMETRY_CTRL.Navigation)
}

void Navigation::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
}

Navigation::~Navigation() {
  // @@protoc_insertion_point(destructor:TELEMETRY_CTRL.Navigation)
  SharedDtor();
}

void Navigation::SharedDtor() {
}

void Navigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Navigation& Navigation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Navigation_TelemetryCtrl_2eproto.base);
  return *internal_default_instance();
}


void Navigation::Clear() {
// @@protoc_insertion_point(message_clear_start:TELEMETRY_CTRL.Navigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&altitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Navigation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          HasBitSetters::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          HasBitSetters::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Navigation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TELEMETRY_CTRL.Navigation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_latitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_longitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float altitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_altitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TELEMETRY_CTRL.Navigation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TELEMETRY_CTRL.Navigation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Navigation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TELEMETRY_CTRL.Navigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required float altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->altitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TELEMETRY_CTRL.Navigation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Navigation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TELEMETRY_CTRL.Navigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // required float altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->altitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TELEMETRY_CTRL.Navigation)
  return target;
}

size_t Navigation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TELEMETRY_CTRL.Navigation)
  size_t total_size = 0;

  if (has_latitude()) {
    // required double latitude = 1;
    total_size += 1 + 8;
  }

  if (has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  if (has_altitude()) {
    // required float altitude = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Navigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TELEMETRY_CTRL.Navigation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double latitude = 1;
    total_size += 1 + 8;

    // required double longitude = 2;
    total_size += 1 + 8;

    // required float altitude = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Navigation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TELEMETRY_CTRL.Navigation)
  GOOGLE_DCHECK_NE(&from, this);
  const Navigation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Navigation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TELEMETRY_CTRL.Navigation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TELEMETRY_CTRL.Navigation)
    MergeFrom(*source);
  }
}

void Navigation::MergeFrom(const Navigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TELEMETRY_CTRL.Navigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      altitude_ = from.altitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Navigation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TELEMETRY_CTRL.Navigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Navigation::CopyFrom(const Navigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TELEMETRY_CTRL.Navigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Navigation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Navigation::Swap(Navigation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Navigation::InternalSwap(Navigation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Navigation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Orientation::InitAsDefaultInstance() {
}
class Orientation::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Orientation>()._has_bits_);
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Orientation::kRollFieldNumber;
const int Orientation::kPitchFieldNumber;
const int Orientation::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Orientation::Orientation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TELEMETRY_CTRL.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:TELEMETRY_CTRL.Orientation)
}

void Orientation::SharedCtor() {
  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:TELEMETRY_CTRL.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
}

void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Orientation& Orientation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Orientation_TelemetryCtrl_2eproto.base);
  return *internal_default_instance();
}


void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:TELEMETRY_CTRL.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&roll_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Orientation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TELEMETRY_CTRL.Orientation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float roll = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_roll(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pitch = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_pitch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float yaw = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_yaw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TELEMETRY_CTRL.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TELEMETRY_CTRL.Orientation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Orientation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TELEMETRY_CTRL.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float roll = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->roll(), output);
  }

  // required float pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  // required float yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TELEMETRY_CTRL.Orientation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TELEMETRY_CTRL.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float roll = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->roll(), target);
  }

  // required float pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }

  // required float yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TELEMETRY_CTRL.Orientation)
  return target;
}

size_t Orientation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TELEMETRY_CTRL.Orientation)
  size_t total_size = 0;

  if (has_roll()) {
    // required float roll = 1;
    total_size += 1 + 4;
  }

  if (has_pitch()) {
    // required float pitch = 2;
    total_size += 1 + 4;
  }

  if (has_yaw()) {
    // required float yaw = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TELEMETRY_CTRL.Orientation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float roll = 1;
    total_size += 1 + 4;

    // required float pitch = 2;
    total_size += 1 + 4;

    // required float yaw = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Orientation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TELEMETRY_CTRL.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Orientation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Orientation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TELEMETRY_CTRL.Orientation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TELEMETRY_CTRL.Orientation)
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TELEMETRY_CTRL.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000002u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Orientation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TELEMETRY_CTRL.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TELEMETRY_CTRL.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Orientation::Swap(Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AirTelemetry::InitAsDefaultInstance() {
}
class AirTelemetry::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<AirTelemetry>()._has_bits_);
  static void set_has_altbaro(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_airspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirTelemetry::kAltBaroFieldNumber;
const int AirTelemetry::kAirSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirTelemetry::AirTelemetry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TELEMETRY_CTRL.AirTelemetry)
}
AirTelemetry::AirTelemetry(const AirTelemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&altbaro_, &from.altbaro_,
    static_cast<size_t>(reinterpret_cast<char*>(&airspeed_) -
    reinterpret_cast<char*>(&altbaro_)) + sizeof(airspeed_));
  // @@protoc_insertion_point(copy_constructor:TELEMETRY_CTRL.AirTelemetry)
}

void AirTelemetry::SharedCtor() {
  ::memset(&altbaro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&airspeed_) -
      reinterpret_cast<char*>(&altbaro_)) + sizeof(airspeed_));
}

AirTelemetry::~AirTelemetry() {
  // @@protoc_insertion_point(destructor:TELEMETRY_CTRL.AirTelemetry)
  SharedDtor();
}

void AirTelemetry::SharedDtor() {
}

void AirTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AirTelemetry& AirTelemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AirTelemetry_TelemetryCtrl_2eproto.base);
  return *internal_default_instance();
}


void AirTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:TELEMETRY_CTRL.AirTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&altbaro_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&airspeed_) -
        reinterpret_cast<char*>(&altbaro_)) + sizeof(airspeed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AirTelemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float altBaro = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_altbaro(&has_bits);
          altbaro_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float airSpeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_airspeed(&has_bits);
          airspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AirTelemetry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TELEMETRY_CTRL.AirTelemetry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float altBaro = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_altbaro(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altbaro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float airSpeed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_airspeed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &airspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TELEMETRY_CTRL.AirTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TELEMETRY_CTRL.AirTelemetry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AirTelemetry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TELEMETRY_CTRL.AirTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float altBaro = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->altbaro(), output);
  }

  // optional float airSpeed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->airspeed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TELEMETRY_CTRL.AirTelemetry)
}

::PROTOBUF_NAMESPACE_ID::uint8* AirTelemetry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TELEMETRY_CTRL.AirTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float altBaro = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->altbaro(), target);
  }

  // optional float airSpeed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->airspeed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TELEMETRY_CTRL.AirTelemetry)
  return target;
}

size_t AirTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TELEMETRY_CTRL.AirTelemetry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float altBaro = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float airSpeed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AirTelemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TELEMETRY_CTRL.AirTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const AirTelemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AirTelemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TELEMETRY_CTRL.AirTelemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TELEMETRY_CTRL.AirTelemetry)
    MergeFrom(*source);
  }
}

void AirTelemetry::MergeFrom(const AirTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TELEMETRY_CTRL.AirTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      altbaro_ = from.altbaro_;
    }
    if (cached_has_bits & 0x00000002u) {
      airspeed_ = from.airspeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AirTelemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TELEMETRY_CTRL.AirTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirTelemetry::CopyFrom(const AirTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TELEMETRY_CTRL.AirTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirTelemetry::IsInitialized() const {
  return true;
}

void AirTelemetry::Swap(AirTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirTelemetry::InternalSwap(AirTelemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(altbaro_, other->altbaro_);
  swap(airspeed_, other->airspeed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AirTelemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MRTelemetry::InitAsDefaultInstance() {
}
class MRTelemetry::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<MRTelemetry>()._has_bits_);
  static void set_has_batteryvoltage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autopilotmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batterychargepercent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MRTelemetry::kBatteryVoltageFieldNumber;
const int MRTelemetry::kAutopilotModeFieldNumber;
const int MRTelemetry::kBatteryChargePercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MRTelemetry::MRTelemetry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TELEMETRY_CTRL.MRTelemetry)
}
MRTelemetry::MRTelemetry(const MRTelemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&batteryvoltage_, &from.batteryvoltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&batterychargepercent_) -
    reinterpret_cast<char*>(&batteryvoltage_)) + sizeof(batterychargepercent_));
  // @@protoc_insertion_point(copy_constructor:TELEMETRY_CTRL.MRTelemetry)
}

void MRTelemetry::SharedCtor() {
  ::memset(&batteryvoltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batterychargepercent_) -
      reinterpret_cast<char*>(&batteryvoltage_)) + sizeof(batterychargepercent_));
}

MRTelemetry::~MRTelemetry() {
  // @@protoc_insertion_point(destructor:TELEMETRY_CTRL.MRTelemetry)
  SharedDtor();
}

void MRTelemetry::SharedDtor() {
}

void MRTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MRTelemetry& MRTelemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MRTelemetry_TelemetryCtrl_2eproto.base);
  return *internal_default_instance();
}


void MRTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:TELEMETRY_CTRL.MRTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&batteryvoltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batterychargepercent_) -
        reinterpret_cast<char*>(&batteryvoltage_)) + sizeof(batterychargepercent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MRTelemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float batteryVoltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_batteryvoltage(&has_bits);
          batteryvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.AutopilotMode autopilotMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TELEMETRY_CTRL::AutopilotMode_IsValid(val))) {
            set_autopilotmode(static_cast<::TELEMETRY_CTRL::AutopilotMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 batteryChargePercent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_batterychargepercent(&has_bits);
          batterychargepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MRTelemetry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TELEMETRY_CTRL.MRTelemetry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float batteryVoltage = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_batteryvoltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &batteryvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.AutopilotMode autopilotMode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TELEMETRY_CTRL::AutopilotMode_IsValid(value)) {
            set_autopilotmode(static_cast< ::TELEMETRY_CTRL::AutopilotMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batteryChargePercent = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_batterychargepercent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batterychargepercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TELEMETRY_CTRL.MRTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TELEMETRY_CTRL.MRTelemetry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MRTelemetry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TELEMETRY_CTRL.MRTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float batteryVoltage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->batteryvoltage(), output);
  }

  // optional .TELEMETRY_CTRL.AutopilotMode autopilotMode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->autopilotmode(), output);
  }

  // optional uint32 batteryChargePercent = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->batterychargepercent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TELEMETRY_CTRL.MRTelemetry)
}

::PROTOBUF_NAMESPACE_ID::uint8* MRTelemetry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TELEMETRY_CTRL.MRTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float batteryVoltage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->batteryvoltage(), target);
  }

  // optional .TELEMETRY_CTRL.AutopilotMode autopilotMode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->autopilotmode(), target);
  }

  // optional uint32 batteryChargePercent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->batterychargepercent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TELEMETRY_CTRL.MRTelemetry)
  return target;
}

size_t MRTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TELEMETRY_CTRL.MRTelemetry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float batteryVoltage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .TELEMETRY_CTRL.AutopilotMode autopilotMode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->autopilotmode());
    }

    // optional uint32 batteryChargePercent = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->batterychargepercent());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MRTelemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TELEMETRY_CTRL.MRTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const MRTelemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MRTelemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TELEMETRY_CTRL.MRTelemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TELEMETRY_CTRL.MRTelemetry)
    MergeFrom(*source);
  }
}

void MRTelemetry::MergeFrom(const MRTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TELEMETRY_CTRL.MRTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      batteryvoltage_ = from.batteryvoltage_;
    }
    if (cached_has_bits & 0x00000002u) {
      autopilotmode_ = from.autopilotmode_;
    }
    if (cached_has_bits & 0x00000004u) {
      batterychargepercent_ = from.batterychargepercent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MRTelemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TELEMETRY_CTRL.MRTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MRTelemetry::CopyFrom(const MRTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TELEMETRY_CTRL.MRTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MRTelemetry::IsInitialized() const {
  return true;
}

void MRTelemetry::Swap(MRTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MRTelemetry::InternalSwap(MRTelemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(batteryvoltage_, other->batteryvoltage_);
  swap(autopilotmode_, other->autopilotmode_);
  swap(batterychargepercent_, other->batterychargepercent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MRTelemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Telemetry::InitAsDefaultInstance() {
  ::TELEMETRY_CTRL::_Telemetry_default_instance_._instance.get_mutable()->gpsnavigation_ = const_cast< ::TELEMETRY_CTRL::Navigation*>(
      ::TELEMETRY_CTRL::Navigation::internal_default_instance());
  ::TELEMETRY_CTRL::_Telemetry_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::TELEMETRY_CTRL::Orientation*>(
      ::TELEMETRY_CTRL::Orientation::internal_default_instance());
  ::TELEMETRY_CTRL::_Telemetry_default_instance_._instance.get_mutable()->airtelemetry_ = const_cast< ::TELEMETRY_CTRL::AirTelemetry*>(
      ::TELEMETRY_CTRL::AirTelemetry::internal_default_instance());
  ::TELEMETRY_CTRL::_Telemetry_default_instance_._instance.get_mutable()->mrtelemetry_ = const_cast< ::TELEMETRY_CTRL::MRTelemetry*>(
      ::TELEMETRY_CTRL::MRTelemetry::internal_default_instance());
}
class Telemetry::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Telemetry>()._has_bits_);
  static void set_has_boardid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TELEMETRY_CTRL::Navigation& gpsnavigation(const Telemetry* msg);
  static void set_has_gpsnavigation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TELEMETRY_CTRL::Orientation& orientation(const Telemetry* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gps_course(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gps_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TELEMETRY_CTRL::AirTelemetry& airtelemetry(const Telemetry* msg);
  static void set_has_airtelemetry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TELEMETRY_CTRL::MRTelemetry& mrtelemetry(const Telemetry* msg);
  static void set_has_mrtelemetry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fixtype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_satellitescount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mag_course(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_servo_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::TELEMETRY_CTRL::Navigation&
Telemetry::HasBitSetters::gpsnavigation(const Telemetry* msg) {
  return *msg->gpsnavigation_;
}
const ::TELEMETRY_CTRL::Orientation&
Telemetry::HasBitSetters::orientation(const Telemetry* msg) {
  return *msg->orientation_;
}
const ::TELEMETRY_CTRL::AirTelemetry&
Telemetry::HasBitSetters::airtelemetry(const Telemetry* msg) {
  return *msg->airtelemetry_;
}
const ::TELEMETRY_CTRL::MRTelemetry&
Telemetry::HasBitSetters::mrtelemetry(const Telemetry* msg) {
  return *msg->mrtelemetry_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Telemetry::kBoardIdFieldNumber;
const int Telemetry::kUnixTimeFieldNumber;
const int Telemetry::kGpsNavigationFieldNumber;
const int Telemetry::kOrientationFieldNumber;
const int Telemetry::kGpsCourseFieldNumber;
const int Telemetry::kGpsSpeedFieldNumber;
const int Telemetry::kAirTelemetryFieldNumber;
const int Telemetry::kMrTelemetryFieldNumber;
const int Telemetry::kFixTypeFieldNumber;
const int Telemetry::kSatellitesCountFieldNumber;
const int Telemetry::kMagCourseFieldNumber;
const int Telemetry::kServoAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Telemetry::Telemetry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TELEMETRY_CTRL.Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gpsnavigation()) {
    gpsnavigation_ = new ::TELEMETRY_CTRL::Navigation(*from.gpsnavigation_);
  } else {
    gpsnavigation_ = nullptr;
  }
  if (from.has_orientation()) {
    orientation_ = new ::TELEMETRY_CTRL::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from.has_airtelemetry()) {
    airtelemetry_ = new ::TELEMETRY_CTRL::AirTelemetry(*from.airtelemetry_);
  } else {
    airtelemetry_ = nullptr;
  }
  if (from.has_mrtelemetry()) {
    mrtelemetry_ = new ::TELEMETRY_CTRL::MRTelemetry(*from.mrtelemetry_);
  } else {
    mrtelemetry_ = nullptr;
  }
  ::memcpy(&boardid_, &from.boardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&servo_angle_) -
    reinterpret_cast<char*>(&boardid_)) + sizeof(servo_angle_));
  // @@protoc_insertion_point(copy_constructor:TELEMETRY_CTRL.Telemetry)
}

void Telemetry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Telemetry_TelemetryCtrl_2eproto.base);
  ::memset(&gpsnavigation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servo_angle_) -
      reinterpret_cast<char*>(&gpsnavigation_)) + sizeof(servo_angle_));
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:TELEMETRY_CTRL.Telemetry)
  SharedDtor();
}

void Telemetry::SharedDtor() {
  if (this != internal_default_instance()) delete gpsnavigation_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete airtelemetry_;
  if (this != internal_default_instance()) delete mrtelemetry_;
}

void Telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Telemetry& Telemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Telemetry_TelemetryCtrl_2eproto.base);
  return *internal_default_instance();
}


void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:TELEMETRY_CTRL.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gpsnavigation_ != nullptr);
      gpsnavigation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != nullptr);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(airtelemetry_ != nullptr);
      airtelemetry_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mrtelemetry_ != nullptr);
      mrtelemetry_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&boardid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_speed_) -
        reinterpret_cast<char*>(&boardid_)) + sizeof(gps_speed_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&fixtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&servo_angle_) -
        reinterpret_cast<char*>(&fixtype_)) + sizeof(servo_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Telemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 boardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_boardid(&has_bits);
          boardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unix_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_unix_time(&has_bits);
          unix_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.Navigation gpsNavigation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_gpsnavigation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.Orientation orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gps_course = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_gps_course(&has_bits);
          gps_course_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gps_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_gps_speed(&has_bits);
          gps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.AirTelemetry AirTelemetry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_airtelemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.MRTelemetry mrTelemetry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_mrtelemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.FixType fixType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TELEMETRY_CTRL::FixType_IsValid(val))) {
            set_fixtype(static_cast<::TELEMETRY_CTRL::FixType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 satellitesCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          HasBitSetters::set_has_satellitescount(&has_bits);
          satellitescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mag_course = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          HasBitSetters::set_has_mag_course(&has_bits);
          mag_course_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 servo_angle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          HasBitSetters::set_has_servo_angle(&has_bits);
          servo_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Telemetry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TELEMETRY_CTRL.Telemetry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boardId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_boardid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unix_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_unix_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unix_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.Navigation gpsNavigation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpsnavigation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.Orientation orientation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gps_course = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_gps_course(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gps_course_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gps_speed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_gps_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gps_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.AirTelemetry AirTelemetry = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_airtelemetry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.MRTelemetry mrTelemetry = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mrtelemetry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.FixType fixType = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TELEMETRY_CTRL::FixType_IsValid(value)) {
            set_fixtype(static_cast< ::TELEMETRY_CTRL::FixType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 satellitesCount = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_satellitescount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellitescount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mag_course = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_mag_course(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mag_course_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 servo_angle = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_servo_angle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servo_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TELEMETRY_CTRL.Telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TELEMETRY_CTRL.Telemetry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Telemetry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TELEMETRY_CTRL.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 boardId = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->boardid(), output);
  }

  // optional uint32 unix_time = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->unix_time(), output);
  }

  // optional .TELEMETRY_CTRL.Navigation gpsNavigation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::gpsnavigation(this), output);
  }

  // optional .TELEMETRY_CTRL.Orientation orientation = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::orientation(this), output);
  }

  // optional float gps_course = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->gps_course(), output);
  }

  // optional float gps_speed = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->gps_speed(), output);
  }

  // optional .TELEMETRY_CTRL.AirTelemetry AirTelemetry = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::airtelemetry(this), output);
  }

  // optional .TELEMETRY_CTRL.MRTelemetry mrTelemetry = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::mrtelemetry(this), output);
  }

  // optional .TELEMETRY_CTRL.FixType fixType = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->fixtype(), output);
  }

  // optional uint32 satellitesCount = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->satellitescount(), output);
  }

  // optional float mag_course = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->mag_course(), output);
  }

  // optional uint32 servo_angle = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->servo_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TELEMETRY_CTRL.Telemetry)
}

::PROTOBUF_NAMESPACE_ID::uint8* Telemetry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TELEMETRY_CTRL.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 boardId = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->boardid(), target);
  }

  // optional uint32 unix_time = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->unix_time(), target);
  }

  // optional .TELEMETRY_CTRL.Navigation gpsNavigation = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::gpsnavigation(this), target);
  }

  // optional .TELEMETRY_CTRL.Orientation orientation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::orientation(this), target);
  }

  // optional float gps_course = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->gps_course(), target);
  }

  // optional float gps_speed = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->gps_speed(), target);
  }

  // optional .TELEMETRY_CTRL.AirTelemetry AirTelemetry = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::airtelemetry(this), target);
  }

  // optional .TELEMETRY_CTRL.MRTelemetry mrTelemetry = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::mrtelemetry(this), target);
  }

  // optional .TELEMETRY_CTRL.FixType fixType = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->fixtype(), target);
  }

  // optional uint32 satellitesCount = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->satellitescount(), target);
  }

  // optional float mag_course = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->mag_course(), target);
  }

  // optional uint32 servo_angle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->servo_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TELEMETRY_CTRL.Telemetry)
  return target;
}

size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TELEMETRY_CTRL.Telemetry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 boardId = 1;
  if (has_boardid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->boardid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TELEMETRY_CTRL.Navigation gpsNavigation = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gpsnavigation_);
    }

    // optional .TELEMETRY_CTRL.Orientation orientation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

    // optional .TELEMETRY_CTRL.AirTelemetry AirTelemetry = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *airtelemetry_);
    }

    // optional .TELEMETRY_CTRL.MRTelemetry mrTelemetry = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mrtelemetry_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional uint32 unix_time = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->unix_time());
    }

    // optional float gps_course = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float gps_speed = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TELEMETRY_CTRL.FixType fixType = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fixtype());
    }

    // optional uint32 satellitesCount = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->satellitescount());
    }

    // optional float mag_course = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 servo_angle = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->servo_angle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TELEMETRY_CTRL.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const Telemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Telemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TELEMETRY_CTRL.Telemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TELEMETRY_CTRL.Telemetry)
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TELEMETRY_CTRL.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gpsnavigation()->::TELEMETRY_CTRL::Navigation::MergeFrom(from.gpsnavigation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation()->::TELEMETRY_CTRL::Orientation::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_airtelemetry()->::TELEMETRY_CTRL::AirTelemetry::MergeFrom(from.airtelemetry());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_mrtelemetry()->::TELEMETRY_CTRL::MRTelemetry::MergeFrom(from.mrtelemetry());
    }
    if (cached_has_bits & 0x00000010u) {
      boardid_ = from.boardid_;
    }
    if (cached_has_bits & 0x00000020u) {
      unix_time_ = from.unix_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      gps_course_ = from.gps_course_;
    }
    if (cached_has_bits & 0x00000080u) {
      gps_speed_ = from.gps_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      fixtype_ = from.fixtype_;
    }
    if (cached_has_bits & 0x00000200u) {
      satellitescount_ = from.satellitescount_;
    }
    if (cached_has_bits & 0x00000400u) {
      mag_course_ = from.mag_course_;
    }
    if (cached_has_bits & 0x00000800u) {
      servo_angle_ = from.servo_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Telemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TELEMETRY_CTRL.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TELEMETRY_CTRL.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_gpsnavigation()) {
    if (!this->gpsnavigation_->IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation_->IsInitialized()) return false;
  }
  return true;
}

void Telemetry::Swap(Telemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gpsnavigation_, other->gpsnavigation_);
  swap(orientation_, other->orientation_);
  swap(airtelemetry_, other->airtelemetry_);
  swap(mrtelemetry_, other->mrtelemetry_);
  swap(boardid_, other->boardid_);
  swap(unix_time_, other->unix_time_);
  swap(gps_course_, other->gps_course_);
  swap(gps_speed_, other->gps_speed_);
  swap(fixtype_, other->fixtype_);
  swap(satellitescount_, other->satellitescount_);
  swap(mag_course_, other->mag_course_);
  swap(servo_angle_, other->servo_angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Telemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TelemetryList::InitAsDefaultInstance() {
}
class TelemetryList::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<TelemetryList>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryList::TelemetryList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TELEMETRY_CTRL.TelemetryList)
}
TelemetryList::TelemetryList(const TelemetryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TELEMETRY_CTRL.TelemetryList)
}

void TelemetryList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TelemetryList_TelemetryCtrl_2eproto.base);
}

TelemetryList::~TelemetryList() {
  // @@protoc_insertion_point(destructor:TELEMETRY_CTRL.TelemetryList)
  SharedDtor();
}

void TelemetryList::SharedDtor() {
}

void TelemetryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryList& TelemetryList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryList_TelemetryCtrl_2eproto.base);
  return *internal_default_instance();
}


void TelemetryList::Clear() {
// @@protoc_insertion_point(message_clear_start:TELEMETRY_CTRL.TelemetryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TelemetryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TELEMETRY_CTRL.Telemetry list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TelemetryList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TELEMETRY_CTRL.TelemetryList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TELEMETRY_CTRL.Telemetry list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TELEMETRY_CTRL.TelemetryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TELEMETRY_CTRL.TelemetryList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TelemetryList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TELEMETRY_CTRL.TelemetryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TELEMETRY_CTRL.Telemetry list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TELEMETRY_CTRL.TelemetryList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TELEMETRY_CTRL.TelemetryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TELEMETRY_CTRL.Telemetry list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TELEMETRY_CTRL.TelemetryList)
  return target;
}

size_t TelemetryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TELEMETRY_CTRL.TelemetryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TELEMETRY_CTRL.Telemetry list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TELEMETRY_CTRL.TelemetryList)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TelemetryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TELEMETRY_CTRL.TelemetryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TELEMETRY_CTRL.TelemetryList)
    MergeFrom(*source);
  }
}

void TelemetryList::MergeFrom(const TelemetryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TELEMETRY_CTRL.TelemetryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void TelemetryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TELEMETRY_CTRL.TelemetryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryList::CopyFrom(const TelemetryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TELEMETRY_CTRL.TelemetryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void TelemetryList::Swap(TelemetryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryList::InternalSwap(TelemetryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriberList::InitAsDefaultInstance() {
}
class SubscriberList::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<SubscriberList>()._has_bits_);
  static void set_has_issubscribetoall(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriberList::kBoardIdFieldNumber;
const int SubscriberList::kIsSubscribeToAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriberList::SubscriberList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TELEMETRY_CTRL.SubscriberList)
}
SubscriberList::SubscriberList(const SubscriberList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      boardid_(from.boardid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issubscribetoall_ = from.issubscribetoall_;
  // @@protoc_insertion_point(copy_constructor:TELEMETRY_CTRL.SubscriberList)
}

void SubscriberList::SharedCtor() {
  issubscribetoall_ = false;
}

SubscriberList::~SubscriberList() {
  // @@protoc_insertion_point(destructor:TELEMETRY_CTRL.SubscriberList)
  SharedDtor();
}

void SubscriberList::SharedDtor() {
}

void SubscriberList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriberList& SubscriberList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriberList_TelemetryCtrl_2eproto.base);
  return *internal_default_instance();
}


void SubscriberList::Clear() {
// @@protoc_insertion_point(message_clear_start:TELEMETRY_CTRL.SubscriberList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boardid_.Clear();
  issubscribetoall_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscriberList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 boardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_boardid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_boardid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isSubscribeToAll = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_issubscribetoall(&has_bits);
          issubscribetoall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscriberList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TELEMETRY_CTRL.SubscriberList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 boardId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_boardid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_boardid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isSubscribeToAll = 2 [default = false];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_issubscribetoall(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issubscribetoall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TELEMETRY_CTRL.SubscriberList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TELEMETRY_CTRL.SubscriberList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscriberList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TELEMETRY_CTRL.SubscriberList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 boardId = 1;
  for (int i = 0, n = this->boardid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      1, this->boardid(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool isSubscribeToAll = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->issubscribetoall(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TELEMETRY_CTRL.SubscriberList)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriberList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TELEMETRY_CTRL.SubscriberList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 boardId = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->boardid_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool isSubscribeToAll = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->issubscribetoall(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TELEMETRY_CTRL.SubscriberList)
  return target;
}

size_t SubscriberList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TELEMETRY_CTRL.SubscriberList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 boardId = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->boardid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->boardid_size());
    total_size += data_size;
  }

  // optional bool isSubscribeToAll = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TELEMETRY_CTRL.SubscriberList)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriberList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TELEMETRY_CTRL.SubscriberList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TELEMETRY_CTRL.SubscriberList)
    MergeFrom(*source);
  }
}

void SubscriberList::MergeFrom(const SubscriberList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TELEMETRY_CTRL.SubscriberList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boardid_.MergeFrom(from.boardid_);
  if (from.has_issubscribetoall()) {
    set_issubscribetoall(from.issubscribetoall());
  }
}

void SubscriberList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TELEMETRY_CTRL.SubscriberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberList::CopyFrom(const SubscriberList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TELEMETRY_CTRL.SubscriberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberList::IsInitialized() const {
  return true;
}

void SubscriberList::Swap(SubscriberList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriberList::InternalSwap(SubscriberList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boardid_.InternalSwap(&other->boardid_);
  swap(issubscribetoall_, other->issubscribetoall_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ctrl::InitAsDefaultInstance() {
  ::TELEMETRY_CTRL::_Ctrl_default_instance_.telemetrylist_ = const_cast< ::TELEMETRY_CTRL::TelemetryList*>(
      ::TELEMETRY_CTRL::TelemetryList::internal_default_instance());
  ::TELEMETRY_CTRL::_Ctrl_default_instance_.subscriberlist_ = const_cast< ::TELEMETRY_CTRL::SubscriberList*>(
      ::TELEMETRY_CTRL::SubscriberList::internal_default_instance());
}
class Ctrl::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Ctrl>()._has_bits_);
  static void set_has_msgtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TELEMETRY_CTRL::TelemetryList& telemetrylist(const Ctrl* msg);
  static const ::TELEMETRY_CTRL::SubscriberList& subscriberlist(const Ctrl* msg);
};

const ::TELEMETRY_CTRL::TelemetryList&
Ctrl::HasBitSetters::telemetrylist(const Ctrl* msg) {
  return *msg->CommandData_.telemetrylist_;
}
const ::TELEMETRY_CTRL::SubscriberList&
Ctrl::HasBitSetters::subscriberlist(const Ctrl* msg) {
  return *msg->CommandData_.subscriberlist_;
}
void Ctrl::set_allocated_telemetrylist(::TELEMETRY_CTRL::TelemetryList* telemetrylist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CommandData();
  if (telemetrylist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      telemetrylist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetrylist, submessage_arena);
    }
    set_has_telemetrylist();
    CommandData_.telemetrylist_ = telemetrylist;
  }
  // @@protoc_insertion_point(field_set_allocated:TELEMETRY_CTRL.Ctrl.telemetryList)
}
void Ctrl::set_allocated_subscriberlist(::TELEMETRY_CTRL::SubscriberList* subscriberlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CommandData();
  if (subscriberlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscriberlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscriberlist, submessage_arena);
    }
    set_has_subscriberlist();
    CommandData_.subscriberlist_ = subscriberlist;
  }
  // @@protoc_insertion_point(field_set_allocated:TELEMETRY_CTRL.Ctrl.subscriberList)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ctrl::kMsgTypeFieldNumber;
const int Ctrl::kErrorFieldNumber;
const int Ctrl::kTelemetryListFieldNumber;
const int Ctrl::kSubscriberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ctrl::Ctrl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TELEMETRY_CTRL.Ctrl)
}
Ctrl::Ctrl(const Ctrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msgtype_, &from.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&msgtype_)) + sizeof(error_));
  clear_has_CommandData();
  switch (from.CommandData_case()) {
    case kTelemetryList: {
      mutable_telemetrylist()->::TELEMETRY_CTRL::TelemetryList::MergeFrom(from.telemetrylist());
      break;
    }
    case kSubscriberList: {
      mutable_subscriberlist()->::TELEMETRY_CTRL::SubscriberList::MergeFrom(from.subscriberlist());
      break;
    }
    case COMMANDDATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TELEMETRY_CTRL.Ctrl)
}

void Ctrl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ctrl_TelemetryCtrl_2eproto.base);
  ::memset(&msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&msgtype_)) + sizeof(error_));
  clear_has_CommandData();
}

Ctrl::~Ctrl() {
  // @@protoc_insertion_point(destructor:TELEMETRY_CTRL.Ctrl)
  SharedDtor();
}

void Ctrl::SharedDtor() {
  if (has_CommandData()) {
    clear_CommandData();
  }
}

void Ctrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ctrl& Ctrl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ctrl_TelemetryCtrl_2eproto.base);
  return *internal_default_instance();
}


void Ctrl::clear_CommandData() {
// @@protoc_insertion_point(one_of_clear_start:TELEMETRY_CTRL.Ctrl)
  switch (CommandData_case()) {
    case kTelemetryList: {
      delete CommandData_.telemetrylist_;
      break;
    }
    case kSubscriberList: {
      delete CommandData_.subscriberlist_;
      break;
    }
    case COMMANDDATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMANDDATA_NOT_SET;
}


void Ctrl::Clear() {
// @@protoc_insertion_point(message_clear_start:TELEMETRY_CTRL.Ctrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&msgtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_) -
        reinterpret_cast<char*>(&msgtype_)) + sizeof(error_));
  }
  clear_CommandData();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Ctrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .TELEMETRY_CTRL.TelemetryCtrlMsgType msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TELEMETRY_CTRL::TelemetryCtrlMsgType_IsValid(val))) {
            set_msgtype(static_cast<::TELEMETRY_CTRL::TelemetryCtrlMsgType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.Error error = 2 [default = Error_NoError];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TELEMETRY_CTRL::Error_IsValid(val))) {
            set_error(static_cast<::TELEMETRY_CTRL::Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.TelemetryList telemetryList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_telemetrylist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TELEMETRY_CTRL.SubscriberList subscriberList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_subscriberlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Ctrl::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TELEMETRY_CTRL.Ctrl)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TELEMETRY_CTRL.TelemetryCtrlMsgType msgType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TELEMETRY_CTRL::TelemetryCtrlMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::TELEMETRY_CTRL::TelemetryCtrlMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.Error error = 2 [default = Error_NoError];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TELEMETRY_CTRL::Error_IsValid(value)) {
            set_error(static_cast< ::TELEMETRY_CTRL::Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.TelemetryList telemetryList = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_telemetrylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TELEMETRY_CTRL.SubscriberList subscriberList = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_subscriberlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TELEMETRY_CTRL.Ctrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TELEMETRY_CTRL.Ctrl)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Ctrl::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TELEMETRY_CTRL.Ctrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TELEMETRY_CTRL.TelemetryCtrlMsgType msgType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .TELEMETRY_CTRL.Error error = 2 [default = Error_NoError];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->error(), output);
  }

  switch (CommandData_case()) {
    case kTelemetryList:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, HasBitSetters::telemetrylist(this), output);
      break;
    case kSubscriberList:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, HasBitSetters::subscriberlist(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TELEMETRY_CTRL.Ctrl)
}

::PROTOBUF_NAMESPACE_ID::uint8* Ctrl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TELEMETRY_CTRL.Ctrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TELEMETRY_CTRL.TelemetryCtrlMsgType msgType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .TELEMETRY_CTRL.Error error = 2 [default = Error_NoError];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(), target);
  }

  switch (CommandData_case()) {
    case kTelemetryList:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, HasBitSetters::telemetrylist(this), target);
      break;
    case kSubscriberList:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, HasBitSetters::subscriberlist(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TELEMETRY_CTRL.Ctrl)
  return target;
}

size_t Ctrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TELEMETRY_CTRL.Ctrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .TELEMETRY_CTRL.TelemetryCtrlMsgType msgType = 1;
  if (has_msgtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->msgtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TELEMETRY_CTRL.Error error = 2 [default = Error_NoError];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->error());
  }

  switch (CommandData_case()) {
    // optional .TELEMETRY_CTRL.TelemetryList telemetryList = 3;
    case kTelemetryList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CommandData_.telemetrylist_);
      break;
    }
    // optional .TELEMETRY_CTRL.SubscriberList subscriberList = 4;
    case kSubscriberList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CommandData_.subscriberlist_);
      break;
    }
    case COMMANDDATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ctrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TELEMETRY_CTRL.Ctrl)
  GOOGLE_DCHECK_NE(&from, this);
  const Ctrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ctrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TELEMETRY_CTRL.Ctrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TELEMETRY_CTRL.Ctrl)
    MergeFrom(*source);
  }
}

void Ctrl::MergeFrom(const Ctrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TELEMETRY_CTRL.Ctrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msgtype_ = from.msgtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.CommandData_case()) {
    case kTelemetryList: {
      mutable_telemetrylist()->::TELEMETRY_CTRL::TelemetryList::MergeFrom(from.telemetrylist());
      break;
    }
    case kSubscriberList: {
      mutable_subscriberlist()->::TELEMETRY_CTRL::SubscriberList::MergeFrom(from.subscriberlist());
      break;
    }
    case COMMANDDATA_NOT_SET: {
      break;
    }
  }
}

void Ctrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TELEMETRY_CTRL.Ctrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ctrl::CopyFrom(const Ctrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TELEMETRY_CTRL.Ctrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ctrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (CommandData_case()) {
    case kTelemetryList: {
      if (has_telemetrylist()) {
        if (!this->telemetrylist().IsInitialized()) return false;
      }
      break;
    }
    case kSubscriberList: {
      break;
    }
    case COMMANDDATA_NOT_SET: {
      break;
    }
  }
  return true;
}

void Ctrl::Swap(Ctrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ctrl::InternalSwap(Ctrl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(msgtype_, other->msgtype_);
  swap(error_, other->error_);
  swap(CommandData_, other->CommandData_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ctrl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TELEMETRY_CTRL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TELEMETRY_CTRL::Navigation* Arena::CreateMaybeMessage< ::TELEMETRY_CTRL::Navigation >(Arena* arena) {
  return Arena::CreateInternal< ::TELEMETRY_CTRL::Navigation >(arena);
}
template<> PROTOBUF_NOINLINE ::TELEMETRY_CTRL::Orientation* Arena::CreateMaybeMessage< ::TELEMETRY_CTRL::Orientation >(Arena* arena) {
  return Arena::CreateInternal< ::TELEMETRY_CTRL::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::TELEMETRY_CTRL::AirTelemetry* Arena::CreateMaybeMessage< ::TELEMETRY_CTRL::AirTelemetry >(Arena* arena) {
  return Arena::CreateInternal< ::TELEMETRY_CTRL::AirTelemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::TELEMETRY_CTRL::MRTelemetry* Arena::CreateMaybeMessage< ::TELEMETRY_CTRL::MRTelemetry >(Arena* arena) {
  return Arena::CreateInternal< ::TELEMETRY_CTRL::MRTelemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::TELEMETRY_CTRL::Telemetry* Arena::CreateMaybeMessage< ::TELEMETRY_CTRL::Telemetry >(Arena* arena) {
  return Arena::CreateInternal< ::TELEMETRY_CTRL::Telemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::TELEMETRY_CTRL::TelemetryList* Arena::CreateMaybeMessage< ::TELEMETRY_CTRL::TelemetryList >(Arena* arena) {
  return Arena::CreateInternal< ::TELEMETRY_CTRL::TelemetryList >(arena);
}
template<> PROTOBUF_NOINLINE ::TELEMETRY_CTRL::SubscriberList* Arena::CreateMaybeMessage< ::TELEMETRY_CTRL::SubscriberList >(Arena* arena) {
  return Arena::CreateInternal< ::TELEMETRY_CTRL::SubscriberList >(arena);
}
template<> PROTOBUF_NOINLINE ::TELEMETRY_CTRL::Ctrl* Arena::CreateMaybeMessage< ::TELEMETRY_CTRL::Ctrl >(Arena* arena) {
  return Arena::CreateInternal< ::TELEMETRY_CTRL::Ctrl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
